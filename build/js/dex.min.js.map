{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/dex.js","dex.min.js","lib/pubsub.js","src/array/array.js","src/color/color.js","src/component/component.js","src/config/config.js","src/console/console.js","src/csv/csv.js","src/datagen/datagen.js","src/json/json.js","src/matrix/matrix.js","src/object/object.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","dex","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"version","range","start","len","_","copy","obj","array","config","bus","console","color","charts","d3","map","c3","dygraphs","d3plus","google","handlebars","threejs","ui","jqueryui","csv","datagen","json","matrix","object","component","../lib/pubsub","./array/array","./color/color","./component/component","./config/config","./console/console","./csv/csv","./datagen/datagen","./json/json","./matrix/matrix","./object/object",2,"context","init","channels","funcType","Function","publish","params","x","args","arguments","subs","Array","prototype","splice","setTimeout","apply","subscribe","channel","callback","push","unsubscribe","handle","y","PubSub",3,"slice","rowRange","maxRows","arraySlice","arrayCopy","isArray","extent","indices","min","max","forEach","ci","row","clone",4,"toHex","substr","digits","exec","red","parseInt","green","blue","rgb","toString","colorScheme","numColors","scale","category10","category20","category20b","category20c","ordinal","colorbrewer","c","effColors","Math","pow","ceil","log","shadeColor","percent","p","R","G","B","round","blendColors","color1","color2","R1","G1","B1","R2","G2","B2","shadeRGBColor","split","blendRGBColors","shade","shadeColor2","blend","gradient","baseColor","charAt","colorToHex","gradientId","substring","darkColor","grad","select","selectAll","data","enter","append","attr",5,"userConfig","defaultConfig","debug","hasOwnProperty","expandAndOverlay","parent","id","name","value","setHierarchical","source","eventType","event","type","warn","description","render","update",6,"expand","expanded","indexOf","isEmpty","top","bottom","overlay","font","custom","defaults","decoration","family","letterSpacing","size","style","weight","wordSpacing","variant","fontSpec","configureFont","node","setAttr","text","textLength","undefined","lengthAdjust","transform","glyphOrientationVertical","dx","dy","writingMode","anchor","fill","format","events","textSpec","configureText","setStyle","callIfDefined","configureFill","configureEvents","stroke","strokeSpec","width","opacity","dasharray","configureStroke","fillColor","fillOpacity","link","d","configureLink","rectangle","height","rx","ry","configureRectangle","mouseover","key","setEventHandler","line","point","end","interpolate","configureLine","path","configurePath","getCallers","caller","callers","currentCaller","reverse","getCallerString","join","eventHandler","callerStr","callee","isFunction","on","optionValue","option","fn","configurePoint","center","cx","cy","configureShapeStyle","circle","title","configureCircle","tick","count","subdivide","major","minor","padding","label","callConditionally","axis","orient","ticks","tickValues","tickSize","innerTickSize","outerTickSize","tickPadding","tickFormat","axisSpec","configureAxis","createAxis","svg","fmap","linear","linearScale","sqrt","sqrtScale","powScale","time","timeScale","logScale","ordinalScale","quantile","quantileScale","quantize","quantizeScale","identity","identityScale","createScale","scaleSpec","configureScale","domain","rangeRound","clamp","nice","linearScaleSpec","logSpec","rangeRoundBands","rangePoints","rangeBands","ordinalSpec","thresholdScale","property","trace",7,"logLevels","TRACE","DEBUG","NORMAL","WARN","FATAL","NONE","logLevel","logWithLevel","msgLevel","msg","dir","fatal",8,"header","transpose","getConnectionMatrix","ri","cid","connectionMatrix","uniques","src","dest","nameToIndex","flatten","connections","createMap","keyIndex","rowMap","toJson","rowIndex","columnIndex","jsonRow","jsonData","toColumnArrayJson","toHierarchicalJson","getChildren","depth","cname","kids","createChild","category","children","child","connect","createRowMap","columnSlice","columns","getNumericColumnNames","possibleNumeric","numericColumns","isNumeric","guessTypes","testResults","hdr","numCols","date","Date","isNaN","getTime","types","results","notDate","notNumber","strictTypes","Double","getFramesByIndex","frameIndices","uniq","sort","b","frames","fi","frame","frameData","frameRow","getNumericIndices","j","numericIndices","getCategoricalIndices","categoricalIndices","isColumnNumeric","columnNum","group","compare","si","h","values","groupName","groups","returnGroups","visitCells","func","longestWord","longest","col","numericSubset","categoricalSubset","toJsonHierarchy","result","valueMap","keys","getGraph","nodes","links","nodeNum","indexMap","isUndefined","target","toNestedJson","getConnectionMap","toNestedJsonChildren","cmap","childMap","rootMap","curMap","has",9,"randomMatrix","spec","rows","random","randomIndexedMatrix","randomIntegerMatrix","identityCsv","identityHeader","identityMatrix",10,"toCsv","keyMap",11,"matrixSlice","tmatrix","ncol","ncols","transposedMatrix","combine","matrix1","matrix2","concat","addIndex","indexMatrix","unshift","isNumber","maxValue","parseFloat","minValue",12,"setTime","isElement","isNode","Object","prop","Node","nodeType","nodeName","HTMLElement","contains","container","isFinite","hierarchy","delimiter"],"mappings":"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","file":"dex.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n *\r\n * The main dexjs module.\r\n *\r\n * @module dex\r\n * @requires d3\r\n * @requires jquery\r\n * @requires jquery-ui\r\n * @requires underscore\r\n *\r\n */\r\nvar dex = {};\r\n\r\n//require(\"d3\");\r\n//$ = require(\"jquery\");\r\n//require(\"jquery-ui\");\r\n//_ = require(\"underscore\");\r\n\r\n/**\r\n *\r\n * The version of dexjs.\r\n *\r\n * @name version\r\n * @type {string}\r\n *\r\n */\r\ndex.version = \"0.7\";\r\n\r\n/**\r\n * This routine will return an array [ start, ..., start + len ] using an increment of 1.\r\n *\r\n * @param {number} start - The starting index.\r\n * @param {number} len - The number of integers to generate.\r\n * @example {@lang javascript}\r\n * // returns [ 0, 1, 2 ]\r\n * range(0, 3)\r\n *\r\n * @returns {Array} An array consisting of elements [ start, ..., start + len ].\r\n *\r\n */\r\ndex.range = function (start, len) {\r\n  return _.range(start, start + len);\r\n};\r\n\r\n/**\r\n *\r\n * This routine is simply a convenience function as it\r\n * simply wraps underscore's implementation of a shallow\r\n * copy.  This method will create a shallow-copied clone\r\n * of the provided plain object. Any nested objects or\r\n * arrays will be copied by reference, not duplicated.\r\n *\r\n * @param obj\r\n * @returns {*}\r\n */\r\ndex.copy = function(obj) {\r\n  return _.copy(obj);\r\n};\r\n\r\n/**\r\n *\r\n * A module for dealing with arrays.\r\n *\r\n * @name array\r\n * @type {module:array}\r\n *\r\n */\r\ndex.array = require('./array/array');\r\n\r\n/**\r\n *\r\n * A module for configuring things.\r\n *\r\n * @name config\r\n * @type {module:config}\r\n *\r\n */\r\ndex.config = require(\"./config/config\");\r\n\r\n/**\r\n *\r\n * The pub/sub bus used by dex in order to publish and subscribe to events.\r\n *\r\n * @name bus\r\n * @type {PubSub}\r\n * @see https://github.com/federico-lox/pubsub.js\r\n *\r\n */\r\ndex.bus = require(\"../lib/pubsub\");\r\n\r\n/**\r\n *\r\n * A module for logging to the console.\r\n *\r\n * @name console\r\n * @type {module:console}\r\n *\r\n */\r\ndex.console = require(\"./console/console\");\r\n\r\n/**\r\n * A module for dealing with colors.\r\n *\r\n * @name color\r\n * @type {module:color}\r\n *\r\n */\r\ndex.color = require(\"./color/color\");\r\n\r\n/**\r\n *\r\n * A charting module.\r\n *\r\n * @name charts\r\n * @type {module:charts}\r\n *\r\n */\r\ndex.charts = {'d3' : {'map' : {}},\r\n  'c3'   : {},\r\n  'dygraphs' : {},\r\n  'd3plus'   : {},\r\n  'google' : {},\r\n  'handlebars' : {},\r\n  'threejs' : {}};\r\n\r\n/**\r\n *\r\n * A charting module.\r\n *\r\n * @name charts\r\n * @type {module:charts}\r\n *\r\n */\r\ndex.ui = {'jqueryui' : {}};\r\n\r\n/**\r\n *\r\n * A module for handling CSV data structures.\r\n *\r\n * @name csv\r\n * @type {module:csv}\r\n *\r\n */\r\ndex.csv = require(\"./csv/csv\");\r\n\r\n/**\r\n *\r\n * A module providing utilities for data generation.\r\n *\r\n * @name datagen\r\n * @type {module:datagen}\r\n *\r\n */\r\ndex.datagen = require(\"./datagen/datagen\");\r\n\r\n/**\r\n *\r\n * A module for dealing with JSON data.\r\n *\r\n * @name json\r\n * @type {module:json}\r\n *\r\n */\r\ndex.json = require(\"./json/json\");\r\n\r\n/**\r\n * A module for dealing with matrices.\r\n *\r\n * @name matrix\r\n * @type {module:matrix}\r\n *\r\n */\r\ndex.matrix = require(\"./matrix/matrix\");\r\n\r\n/**\r\n * A module for dealing with javascript objects.\r\n *\r\n * @name object\r\n * @type {module:object}\r\n *\r\n */\r\ndex.object = require(\"./object/object\");\r\n\r\n/**\r\n *\r\n * A module for dealing dex components.\r\n *\r\n * @name component\r\n * @type {module:component}\r\n *\r\n */\r\ndex.component = require(\"./component/component\");\r\n\r\nmodule.exports = dex;",null,"/**\r\n * pubsub.js\r\n *\r\n * A tiny, optimized, tested, standalone and robust\r\n * pubsub implementation supporting different javascript environments\r\n *\r\n * @author Federico \"Lox\" Lucignano <http://plus.ly/federico.lox>\r\n *\r\n * @see https://github.com/federico-lox/pubsub.js\r\n */\r\n\r\n/*global define, module*/\r\n(function (context) {\r\n  'use strict';\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  function init() {\r\n    //the channel subscription hash\r\n    var channels = {},\r\n    //help minification\r\n      funcType = Function;\r\n\r\n    return {\r\n      /*\r\n       * @public\r\n       *\r\n       * Publish some data on a channel\r\n       *\r\n       * @param String channel The channel to publish on\r\n       * @param Mixed argument The data to publish, the function supports\r\n       * as many data parameters as needed\r\n       *\r\n       * @example Publish stuff on '/some/channel'.\r\n       * Anything subscribed will be called with a function\r\n       * signature like: function(a,b,c){ ... }\r\n       *\r\n       * PubSub.publish(\r\n       *\t\t\"/some/channel\", \"a\", \"b\",\r\n       *\t\t{total: 10, min: 1, max: 3}\r\n       * );\r\n       */\r\n      publish: function () {\r\n        //help minification\r\n        var args = arguments,\r\n        // args[0] is the channel\r\n          subs = channels[args[0]],\r\n          len,\r\n          params,\r\n          x;\r\n\r\n        if (subs) {\r\n          len = subs.length;\r\n          params = (args.length > 1) ?\r\n            Array.prototype.splice.call(args, 1) : [];\r\n\r\n          //run the callbacks asynchronously,\r\n          //do not block the main execution process\r\n          setTimeout(\r\n            function () {\r\n              //executes callbacks in the order\r\n              //in which they were registered\r\n              for (x = 0; x < len; x += 1) {\r\n                subs[x].apply(context, params);\r\n              }\r\n\r\n              //clear references to allow garbage collection\r\n              subs = context = params = null;\r\n            },\r\n            0\r\n          );\r\n        }\r\n      },\r\n\r\n      /*\r\n       * @public\r\n       *\r\n       * Register a callback on a channel\r\n       *\r\n       * @param String channel The channel to subscribe to\r\n       * @param Function callback The event handler, any time something is\r\n       * published on a subscribed channel, the callback will be called\r\n       * with the published array as ordered arguments\r\n       *\r\n       * @return Array A handle which can be used to unsubscribe this\r\n       * particular subscription\r\n       *\r\n       * @example PubSub.subscribe(\r\n       *\t\t\t\t\"/some/channel\",\r\n       *\t\t\t\tfunction(a, b, c){ ... }\r\n       *\t\t\t);\r\n       */\r\n      subscribe: function (channel, callback) {\r\n        if (typeof channel !== 'string') {\r\n          throw \"invalid or missing channel\";\r\n        }\r\n\r\n        if (!(callback instanceof funcType)) {\r\n          throw \"invalid or missing callback\";\r\n        }\r\n\r\n        if (!channels[channel]) {\r\n          channels[channel] = [];\r\n        }\r\n\r\n        channels[channel].push(callback);\r\n\r\n        return {channel: channel, callback: callback};\r\n      },\r\n\r\n      /*\r\n       * @public\r\n       *\r\n       * Disconnect a subscribed function f.\r\n       *\r\n       * @param Mixed handle The return value from a subscribe call or the\r\n       * name of a channel as a String\r\n       * @param Function callback [OPTIONAL] The event handler originaally\r\n       * registered, not needed if handle contains the return value\r\n       * of subscribe\r\n       *\r\n       * @example\r\n       * var handle = PubSub.subscribe(\"/some/channel\", function(){});\r\n       * PubSub.unsubscribe(handle);\r\n       *\r\n       * or\r\n       *\r\n       * PubSub.unsubscribe(\"/some/channel\", callback);\r\n       */\r\n      unsubscribe: function (handle, callback) {\r\n        if (handle.channel && handle.callback) {\r\n          callback = handle.callback;\r\n          handle = handle.channel;\r\n        }\r\n\r\n        if (typeof handle !== 'string') {\r\n          throw \"invalid or missing channel\";\r\n        }\r\n\r\n        if (!(callback instanceof funcType)) {\r\n          throw \"invalid or missing callback\";\r\n        }\r\n\r\n        var subs = channels[handle],\r\n          x,\r\n          y = (subs instanceof Array) ? subs.length : 0;\r\n\r\n        for (x = 0; x < y; x += 1) {\r\n          if (subs[x] === callback) {\r\n            subs.splice(x, 1);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  //UMD\r\n  if (typeof define === 'function' && define.amd) {\r\n    //AMD module\r\n    define('pubsub', init);\r\n  } else if (typeof module === 'object' && module.exports) {\r\n    //CommonJS module\r\n    module.exports = init();\r\n  } else {\r\n    //traditional namespace\r\n    context.PubSub = init();\r\n  }\r\n}(this));","/**\r\n *\r\n * This module provides routines for dealing with arrays.\r\n *\r\n * @module array\r\n *\r\n */\r\n\r\nvar array = {};\r\nmodule.exports = array;\r\n\r\n/**\r\n *\r\n * Take a slice of an array without modifying the original array.\r\n *\r\n * dex.array.slice(array) - Return a copy of the array.\r\n * dex.array.slice(array, rowRange) - Copy the array, then return a slice\r\n * within the specified range.\r\n * dex.array.slice(array, rowRange, maxRows) - Copy the array, then return a slice\r\n * within the specified range up to, but not exceeding, maxRows rows.\r\n *\r\n * @param (array) array - The array to slice.\r\n * @param (array|number) rowRange - If supplied an array, the range defined by the of rows to slice.\r\n * @param {number} maxRows - The maximum number of rows to return.\r\n *\r\n * @example {@lang javascript}\r\n * var myArray = [ 1, 2, 3, 4, 5 ];\r\n *\r\n * // Returns: [ 3, 4, 5]\r\n * slice(myArray, 2);\r\n *\r\n * // Returns: [ 1, 3, 5 ]\r\n * slice(myArray, [0, 2, 4]);\r\n *\r\n * // I am not sure why you would do this, but in the interest of supporting\r\n * // the Principle of Least Surprise, this returns the array unchanged.\r\n * // Returns: [ 1, 2, 3, 4, 5 ]\r\n * slice(myArray)\r\n *\r\n */\r\nmodule.exports.slice = function (array, rowRange, maxRows) {\r\n    var arraySlice = [];\r\n    var range;\r\n    var i;\r\n\r\n    var arrayCopy = dex.array.copy(array);\r\n\r\n    // Numeric.\r\n    // Array.\r\n    // Object.  Numeric with start and end.\r\n    if (arguments.length < 2) {\r\n        return arrayCopy;\r\n    }\r\n    else if (arguments.length == 2) {\r\n        if (Array.isArray(rowRange)) {\r\n            range = rowRange;\r\n        }\r\n        else {\r\n            range = dex.range(rowRange, arrayCopy.length - rowRange);\r\n        }\r\n    }\r\n    else if (arguments.length > 2) {\r\n        if (Array.isArray(rowRange)) {\r\n            range = rowRange;\r\n        }\r\n        else {\r\n            range = dex.range(rowRange, maxRows);\r\n        }\r\n    }\r\n\r\n    //dex.console.log(\"BEFORE: array.slice(range=\" + range + \"): arraySlice=\" + arraySlice);\r\n    for (i = 0; i < range.length; i++) {\r\n        arraySlice.push(arrayCopy[range[i]]);\r\n    }\r\n    //dex.console.log(\"AFTER: array.slice(range=\" + range + \"): arraySlice=\" + arraySlice);\r\n    return arraySlice;\r\n};\r\n\r\n/**\r\n *\r\n * This method locates the array element whose id tag matches the supplied\r\n * id.  It returns the index of the first matching array element, or -1 if\r\n * none was found.\r\n *\r\n * @param array The array to search.\r\n * @param id The id to search on.\r\n *\r\n * @returns {number} The index of the first matching array element, or -1\r\n * if not found.\r\n *\r\n */\r\n/*\r\n module.exports.indexOfById = function (array, id) {\r\n return _.findIndex(array, { id: id })\r\n };\r\n */\r\n\r\n/**\r\n *\r\n * Is this routine actually used anymore?  Can I deprecate it?  It's long and\r\n * I don't remember exactly what its doing.\r\n *\r\n * @param data\r\n * @param numValues\r\n * @returns {*}\r\n *\r\n */\r\n/*\r\n module.exports.indexBands = function (data, numValues) {\r\n dex.console.log(\"BANDS\");\r\n var interval, residual, tickIndices, last, i;\r\n\r\n if (numValues <= 0) {\r\n tickIndices = [];\r\n }\r\n else if (numValues == 1) {\r\n tickIndices = [Math.floor(numValues / 2)];\r\n }\r\n else if (numValues == 2) {\r\n tickIndices = [0, data.length - 1];\r\n }\r\n else {\r\n // We have at least 2 ticks to display.\r\n // Calculate the rough interval between ticks.\r\n interval = Math.max(1, Math.floor(data.length / (numValues - 1)));\r\n\r\n // If it's not perfect, record it in the residual.\r\n residual = Math.floor(data.length % (numValues - 1));\r\n\r\n // Always label our first data point.\r\n tickIndices = [0];\r\n\r\n // Set stop point on the interior ticks.\r\n last = data.length - interval;\r\n\r\n dex.console.log(\"TEST\", data, numValues, interval, residual, last);\r\n\r\n // Figure out the interior ticks, gently drift to accommodate\r\n // the residual.\r\n for (i = interval; i <= last; i += interval) {\r\n if (residual > 0) {\r\n i += 1;\r\n residual -= 1;\r\n }\r\n tickIndices.push(i);\r\n }\r\n // Always graph the last tick.\r\n tickIndices.push(data.length - 1);\r\n }\r\n dex.console.log(\"BANDS\");\r\n return tickIndices;\r\n };\r\n */\r\n\r\n/**\r\n * Return an array consisting of unique elements within the first.\r\n *\r\n * @param array The array to extract unique values from.\r\n *\r\n * @returns {Array} An array which consists of unique elements within\r\n * the user supplied array.\r\n *\r\n */\r\n//module.exports.unique = function (array) {\r\n//  return _.uniq(array);\r\n//};\r\n\r\n/**\r\n *\r\n * Returns an array of the mathematically smallest and largest\r\n * elements within the array.\r\n *\r\n * @param matrix The array to evaluate.\r\n * @param indices The array indices to be considered in the evaluation.\r\n *\r\n * @returns {Array} - An array consisting of [ min, max ] of the array.\r\n *\r\n */\r\nmodule.exports.extent = function (matrix, indices) {\r\n    if (!matrix || matrix.length <= 0 || !indices || indices.length <= 0) {\r\n        return [0, 0];\r\n    }\r\n\r\n    var min = matrix[0][indices[0]];\r\n    var max = min;\r\n\r\n    indices.forEach(function (ci) {\r\n        matrix.forEach(function (row) {\r\n            if (min > row[ci]) {\r\n                min = row[ci];\r\n            }\r\n            if (max < row[ci]) {\r\n                max = row[ci];\r\n            }\r\n        })\r\n    });\r\n    return [min, max];\r\n};\r\n\r\n/**\r\n *\r\n * Return a distinct copy of an array.\r\n *\r\n * @param {Array} array The array to copy.\r\n * @returns {Array} The copy of the array.\r\n *\r\n */\r\nmodule.exports.copy = function (array) {\r\n    // Shallow copy\r\n    return _.clone(array);\r\n    // Deep copy:\r\n    //return $.extend(true, {}, array);\r\n};","/**\r\n *\r\n * This module provides routines for dealing with colors.\r\n *\r\n * @module color\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * This routine converts a rgb(red, green, blue) color to it's\r\n * equivalent #ffffff hexadecimal form.\r\n *\r\n * @param color The color we wish to convert to hex.\r\n * @returns {*}\r\n */\r\nexports.toHex = function (color) {\r\n  if (color.substr(0, 1) === '#') {\r\n    return color;\r\n  }\r\n  //console.log(\"COLOR: \" + color)\r\n  var digits = /rgb\\((\\d+),(\\d+),(\\d+)\\)/.exec(color);\r\n  //console.log(\"DIGITS: \" + digits);\r\n  var red = parseInt(digits[1]);\r\n  var green = parseInt(digits[2]);\r\n  var blue = parseInt(digits[3]);\r\n\r\n  var rgb = blue | (green << 8) | (red << 16);\r\n  return '#' + rgb.toString(16);\r\n};\r\n\r\n/**\r\n *\r\n * This routine returns the requested named color scheme with\r\n * the requested number of colors.\r\n *\r\n * @param colorScheme The named color schemes: cat10, cat20, cat20b, cat20c, HiContrast or\r\n * any of the named colors from colorbrewer.\r\n * @param numColors The number of colors being requested.\r\n *\r\n * @returns {*} The array of colors.\r\n */\r\nexports.colorScheme = function (colorScheme, numColors) {\r\n  if (colorScheme === \"cat10\" || colorScheme == \"1\") {\r\n    return d3.scale.category10();\r\n  }\r\n  else if (colorScheme === \"cat20\" || colorScheme == \"2\") {\r\n    return d3.scale.category20();\r\n  }\r\n  else if (colorScheme === \"cat20b\" || colorScheme == \"3\") {\r\n    return d3.scale.category20b();\r\n  }\r\n  else if (colorScheme === \"cat20c\" || colorScheme == \"4\") {\r\n    return d3.scale.category20c();\r\n  }\r\n  else if (colorScheme == \"HiContrast\") {\r\n    return d3.scale.ordinal().range(colorbrewer[colorScheme][9]);\r\n  }\r\n  else if (colorScheme in colorbrewer) {\r\n    //console.log(\"LENGTH: \" + len);\r\n    var c;\r\n    var effColors = Math.pow(2, Math.ceil(Math.log(numColors) / Math.log(2)));\r\n    //console.log(\"EFF LENGTH: \" + len);\r\n\r\n    // Find the best cmap:\r\n    if (effColors > 128) {\r\n      effColors = 256;\r\n    }\r\n\r\n    for (c = effColors; c >= 2; c--) {\r\n      if (colorbrewer[colorScheme][c]) {\r\n        return d3.scale.ordinal().range(colorbrewer[colorScheme][c]);\r\n      }\r\n    }\r\n    for (c = effColors; c <= 256; c++) {\r\n      if (colorbrewer[colorScheme][c]) {\r\n        return d3.scale.ordinal().range(colorbrewer[colorScheme][c]);\r\n      }\r\n    }\r\n    return d3.scale.category20();\r\n  }\r\n  else {\r\n    return d3.scale.category20();\r\n  }\r\n};\r\n\r\n/**\r\n *\r\n * Given a color, lighten or darken it by the requested percent.\r\n *\r\n * @param color The color to modify.\r\n * @param percent A floating point number in the range of [-1.0, 1.0].  Negative\r\n * values will lighten the color, positive values will darken it.\r\n *\r\n * @returns {string} The lightened or darkened color in the form of #ffffff.\r\n *\r\n */\r\nexports.shadeColor = function (color, percent) {\r\n  var f = parseInt(color.slice(1), 16), t = percent < 0 ? 0 : 255,\r\n    p = percent < 0 ? percent * -1 : percent,\r\n    R = f >> 16, G = f >> 8 & 0x00FF, B = f & 0x0000FF;\r\n  return \"#\" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) *\r\n    0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);\r\n};\r\n\r\n/**\r\n *\r\n * Given two colors, blend them together.\r\n *\r\n * @param color1\r\n * @param color2\r\n * @param percent\r\n * @returns {string}\r\n *\r\n */\r\nexports.blendColors = function(color1, color2, percent) {\r\n  var f = parseInt(color1.slice(1), 16), t = parseInt(color2.slice(1), 16),\r\n    R1 = f >> 16, G1 = f >> 8 & 0x00FF,\r\n    B1 = f & 0x0000FF, R2 = t >> 16,\r\n    G2 = t >> 8 & 0x00FF, B2 = t & 0x0000FF;\r\n\r\n  return \"#\" + (0x1000000 + (Math.round((R2 - R1) * percent) + R1) * 0x10000 +\r\n    (Math.round((G2 - G1) * percent) + G1) * 0x100 +\r\n    (Math.round((B2 - B1) * percent) + B1)).toString(16).slice(1);\r\n};\r\n\r\n/**\r\n *\r\n * @param color\r\n * @param percent\r\n * @returns {string}\r\n */\r\nexports.shadeRGBColor = function (color, percent) {\r\n  var f = color.split(\",\"), t = percent < 0 ? 0 : 255,\r\n    p = percent < 0 ? percent * -1 : percent, R = parseInt(f[0].slice(4)),\r\n    G = parseInt(f[1]), B = parseInt(f[2]);\r\n  return \"rgb(\" + (Math.round((t - R) * p) + R) + \",\" +\r\n    (Math.round((t - G) * p) + G) + \",\" +\r\n    (Math.round((t - B) * p) + B) + \")\";\r\n};\r\n\r\n/**\r\n *\r\n * @param color1\r\n * @param color2\r\n * @param percent\r\n * @returns {string}\r\n */\r\nexports.blendRGBColors = function(color1, color2, percent) {\r\n  var f = color1.split(\",\"), t = color2.split(\",\"), R = parseInt(f[0].slice(4)),\r\n    G = parseInt(f[1]), B = parseInt(f[2]);\r\n  return \"rgb(\" + (Math.round((parseInt(t[0].slice(4)) - R) * p) + R) + \",\" +\r\n    (Math.round((parseInt(t[1]) - G) * percent) + G) + \",\" +\r\n    (Math.round((parseInt(t[2]) - B) * percent) + B) + \")\";\r\n};\r\n\r\n/**\r\n *\r\n * @param color\r\n * @param percent\r\n * @returns {*}\r\n */\r\nexports.shade = function(color, percent) {\r\n  if (color.length > 7) return shadeRGBColor(color, percent);\r\n  else return shadeColor2(color, percent);\r\n};\r\n\r\n/**\r\n *\r\n * @param color1\r\n * @param color2\r\n * @param percent\r\n */\r\nexports.blend = function (color1, color2, percent) {\r\n  if (color1.length > 7) return blendRGBColors(color1, color2, percent);\r\n  else return blendColors(color1, color2, percent);\r\n};\r\n\r\n/**\r\n *\r\n * Given a color and a percent to lighten or darken it.\r\n *\r\n * @param color The base color.\r\n * @param percent The pecentage to lighten (negative) or darken (positive) the color.\r\n *\r\n * @returns {string} The computed color.\r\n *\r\n */\r\n/*\r\n exports.shadeColor = function (color, percent) {\r\n var R = parseInt(color.substring(1, 3), 16)\r\n var G = parseInt(color.substring(3, 5), 16)\r\n var B = parseInt(color.substring(5, 7), 16);\r\n\r\n R = parseInt(R * (100 + percent) / 100);\r\n G = parseInt(G * (100 + percent) / 100);\r\n B = parseInt(B * (100 + percent) / 100);\r\n\r\n R = (R < 255) ? R : 255;\r\n G = (G < 255) ? G : 255;\r\n B = (B < 255) ? B : 255;\r\n\r\n var RR = ((R.toString(16).length == 1) ? \"0\" + R.toString(16) : R.toString(16));\r\n var GG = ((G.toString(16).length == 1) ? \"0\" + G.toString(16) : G.toString(16));\r\n var BB = ((B.toString(16).length == 1) ? \"0\" + B.toString(16) : B.toString(16));\r\n\r\n return \"#\" + RR + GG + BB;\r\n };\r\n */\r\n\r\nexports.gradient = function (baseColor) {\r\n  if (baseColor.charAt(0) == 'r') {\r\n    baseColor = colorToHex(baseColor);\r\n  }\r\n  var gradientId;\r\n  gradientId = \"gradient\" + baseColor.substring(1)\r\n  console.log(\"GradientId: \" + gradientId);\r\n  console.log(\"BaseColor : \" + baseColor);\r\n\r\n  //var lightColor = shadeColor(baseColor, -10)\r\n  var darkColor = shadeColor(baseColor, -20)\r\n\r\n  var grad = d3.select(\"#gradients\").selectAll(\"#\" + gradientId)\r\n    .data([gradientId])\r\n    .enter()\r\n    .append(\"radialGradient\")\r\n    .attr(\"class\", \"colorGradient\")\r\n    .attr(\"id\", gradientId)\r\n    .attr(\"gradientUnits\", \"objectBoundingBox\")\r\n    .attr(\"fx\", \"30%\")\r\n    .attr(\"fy\", \"30%\")\r\n\r\n  grad.append(\"stop\")\r\n    .attr(\"offset\", \"0%\")\r\n    .attr(\"style\", \"stop-color:#FFFFFF\")\r\n\r\n  // Middle\r\n  grad.append(\"stop\")\r\n    .attr(\"offset\", \"40%\")\r\n    .attr(\"style\", \"stop-color:\" + baseColor)\r\n\r\n  // Outer Edges\r\n  grad.append(\"stop\")\r\n    .attr(\"offset\", \"100%\")\r\n    .attr(\"style\", \"stop-color:\" + darkColor)\r\n\r\n  return \"url(#\" + gradientId + \")\";\r\n};\r\n","/**\r\n *\r\n * This module provides base capabilities which are available to all dex components.\r\n *\r\n * @interface\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * A matrix is a two dimensional array of values.  It's a data structure\r\n * which is a key component of a csv which is used extensively\r\n * throughout DexJs.  The data portion of a csv is simply a matrix.\r\n * A csv is the standard form of data input expected by dex components.\r\n *\r\n * @typedef {Array.<Array.<Object>>} matrix\r\n * @example {@lang javascript}\r\n * // A 2x2 matrix of numbers.\r\n * var matrix1 = [[1, 2], [3, 4]];\r\n *\r\n * // A 2x2 matrix of strings.\r\n * var matrix2 = [['Pat', 'Martin'], ['Mike', 'Parton']];\r\n */\r\n\r\n/**\r\n * A CSV data structure.\r\n *\r\n * @typedef {Object} csv\r\n *\r\n * @property {Array} header - An array containing the headings for this csv.\r\n * @property {matrix} data - A matrix containing the data for this csv.\r\n * @example {@lang javascript}\r\n * var myCsv = { header : [ \"FirstName\", \"LastName\" ],\r\n *               data   : [[ \"Bob\", \"Jones\" ], [ \"Ricky\", \"Bobby\" ]] };\r\n *\r\n */\r\n\r\n/**\r\n * A D3 axis specification.\r\n * @typedef {Object} d3axis_spec\r\n *\r\n * @property {d3scale} [scale=dex.config.scale({type:'linear'})] - The scale to be used for this axis.\r\n * @property {String} [orient=bottom] - The orientation of the axis. (left|right|top|bottom)\r\n * @property {String} [ticks] - The number of ticks to generate for this axis.\r\n * @property {Array} [tickValues] - Supply specific places to draw the ticks.\r\n * @property {String} [tickSize=[6,6]] - Sets the length of both the inner and outer ticks.\r\n * @property {String} [innerTickSize=d] - Sets the length of inner ticks.\r\n * @property {String} [outerTickSize=6] - Sets the length of outer ticks.\r\n * @property {String} [tickPadding=3] - Sets the tick padding in pixels.\r\n * @property {String} [tickFormat] - Sets the format of tick labels. ex: d3.format(\",.0f\")\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * A D3 scale specification.\r\n *\r\n * @typedef {Object} d3scale_spec\r\n *\r\n * @property {string} [type=linear] - The type of scale to create.  Valid types are\r\n * (linear|sqrt|pow|time|log|ordinal|quantile|quantize|identity)\r\n * @property {Array} [domain=[0, 100]] - The domain for this scale.\r\n * @property {Array} [range=[0, 800]] - The range for this scale.\r\n * @property {Array} [rangeRound] - Sets the scale's output range to the specified array of values, while also\r\n * setting the scale's interpolator to d3.interpolateRound.\r\n * @property {String} [interpolate] - When supplied, sets the scale's output\r\n * interpolator using the specified factory.\r\n * @property {String} [clamp] - Set to true in order to enable clamping, false to disable\r\n * it.  Ensures interpolation/extrapolation does not generate values outside of this\r\n * scale's range.\r\n * @property {String} [nice] - If true, will extend the scale's domain to begin and\r\n * end on nice round integer values.\r\n * @property {string} [tickFormat] - Only applies to time scales.  Set's the tick\r\n * format.\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * A D3 font specification.  More information can be found in the {@link http://www.w3.org/TR/SVG/text.html|W3C SVG 1.1 Text Specification}.\r\n *\r\n * @typedef {Object} d3font_spec\r\n *\r\n * @property {string} [decoration=none] - This property describes decorations that are added to the text of an element.\r\n * Valid values: ( none | underline | overline | line-through | blink | inherit )\r\n * @property {string} [family=sans-serif] - This property indicates which font family is to be used to render the text.\r\n * @property {string} [letterSpacing=normal] -\r\n * @property {integer} [size=14] - The size of the font.\r\n * @property {string} [style=normal] - This property specifies whether the text is to be rendered using a normal,\r\n * italic or oblique face. Valid values are: ( normal | italic | oblique | inherit ).\r\n * @property {string} [weight=normal] - This property indicates whether the text is to be rendered using the normal glyphs\r\n * for lowercase characters or using small-caps glyphs for lowercase characters.  Valid values for this field are:\r\n * ( normal | bold | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 | inherit)\r\n * @property {string|integer} [wordSpacing=normal] - Specifies the amount of space that is to be added between text characters.\r\n * Valid values: ( auto | <integer-length> | inherit )\r\n * @property {string} [variant=normal] - his property indicates whether the text is to be rendered using\r\n * the normal glyphs for lowercase characters or using small-caps glyphs for lowercase characters.\r\n * Valid values: ( normal | small-caps | inherit )\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * A D3 stroke specification.\r\n *\r\n * @typedef {Object} d3stroke_spec\r\n *\r\n * @property {float} [width=1] - The width (in pixels) of this stroke.\r\n * @property {string} [color=black] - The color of this stroke.\r\n * @property {float} [opacity=1] - The opacity of this stroke in the range of\r\n * where 0 is invisible and 1 represents 100% opaque stroke. [0, 1]\r\n * @property {string} [dasharray] - Used to draw dashed lines.  Ex: \"1 1\" will draw\r\n * a dashed line which consists of single pixel dashes separated by 1 empty pixel.\r\n * @property {string} [transform] - A transform to be applied to the stroke.\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * A D3 text specification.\r\n *\r\n * @typedef {Object} d3text_spec\r\n *\r\n * @property {d3font_spec} [font] - The d3 font specification for this stroke.\r\n * @property {integer} [x=0] - The x coordinate for the first character of this text.\r\n * @property {integer} [y=0] - The y coordinate for the first character of this text.\r\n * @property {integer} [textLength] - The author's estimation of the length of this text.\r\n * The system will use this as a preference and attempt to size the text to this length.\r\n * @property {integer} [lengthAdjust] - Indicates the type of adjustments which the user\r\n * agent shall make to make the rendered length of the text match the value specified on\r\n * the textLength attribute.  Valid values: ( spacing | spacingAndGlyphs )\r\n * @property {string} [transform] - Any extra transformations to be applied to this\r\n * text.\r\n * @property {string} [glyphOrientationVertical] - Allows the user to control the\r\n * orientation of text.  Valid values: ( auto | <angle> | inherit ).  Angle may be expressed\r\n * in degrees, radians, or as a gradient.\r\n * @property {string} [text] - The text we are representing.\r\n * @property {integer} [dx=0] - An x-axis offset to be applied to this text.\r\n * @property {integer} [dy=0] - A y-axis offset to be applied to this text.\r\n * @property {string} [writingMode] - Specifies whether text flows left to right,\r\n * right to left, top to bottom or bottom to top.  Valid values: ( lr-tb, rl-tb, tb-rl,\r\n * lr, rl, tb, inherit )\r\n * @property {string} [anchor=start] - Specifies where this text should be anchored to.\r\n * Valid values: ( start | middle | end )\r\n * @property {d3fill_spec} [fill] - The fill to be applied to this text.\r\n * @property {string} [format] - A d3 format to be applied to the text.\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * A D3 rectangle specification.\r\n *\r\n * @typedef {Object} d3rect_spec\r\n *\r\n * @property {number} [width=50] - The width of this rectangle.\r\n * @property {number} [height=50] - The height of this rectangle.\r\n * @property {number} [x=0] - The x coordinate of the top left corner of this rectangle.\r\n * @property {number} [y=0] - The y coordinate of the top left corner of this rectangle.\r\n * @property {number} [rx=0] - For rounded rectangles, the x-axis radius of the ellipse\r\n * used to round off the corners of the rectangle.\r\n * @property {number} [ry=0] - For rounded rectangles, the y-axis radius of the ellipse\r\n * used to round off the corners of the rectangle.\r\n * @property {d3stroke_spec} [stroke] - The stroke which will be used to draw the rectangle.\r\n * @property {number} [opacity=1] - The opacity for this rectangle expressed as a floating\r\n * point number in the range of [ 0.0, 1.0 ] where 0 is transparent, 1 is opaque, and all\r\n * others are somewhere in between fully transparent and fully opaque.\r\n * @property {d3colorscale} [color=d3.scale.category20()] - The color scale which we will\r\n * to color this rectangle.\r\n * @property {string} [transform] - A transform, if any, to be applied to this rectangle.\r\n * @property {events_spec} [events] - Any events which we wish to respond to.\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * An events specification.  Many events are supported, the ones listed here are a subset\r\n * of all of the possible events.  For a complete list, refer to Mozilla's developer documentation\r\n * concerning {@link https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events|standard events}.\r\n *\r\n * @typedef {Object} dexevents_spec\r\n *\r\n * @property {string} [mousedown] - Handles events generated when a pointing device button (usually a mouse)\r\n * is pressed on an element.\r\n * @property {string} [mouseenter] - Handles mouseover events generated when a pointing device is moved onto\r\n * the element that has the listener attached.\r\n * @property {string} [mouseleave] - Handles mouseover events generated when a pointing device is moved off\r\n * the element that has the listener attached.\r\n * @property {string} [mousemove] - Handles mouseover events generated when a pointing device is moved over\r\n * an element.\r\n * @property {string} [mouseout] - Handles mouseover events generated when a pointing device is moved off\r\n * the element that has the listener attached or off one of its children.\r\n * @property {string} [mouseover] - Handles mouseover events generated when a pointing device is moved\r\n * onto the element that has the listener attached or onto one of its children.\r\n * @property {string} [mouseup] - Handles mouseover events generated when a pointing device button is\r\n * released over an element.\r\n * @property {string} [dblclick] - Handles mouseover events generated when a pointing device is quickly\r\n * clicked twice on an element.\r\n * @property {string} [wheel] - The mouse wheel of a pointing device has been rotated in any direction.\r\n * @property {string} [keydown] - Handles mouseover events generated when a key is pressed down.\r\n * @property {string} [keypress] - Handles mouseover events generated when a key is pressed down\r\n * and that key normally produces a character value.\r\n * @property {string} [keyup] - Handles mouseover events generated when a key is released.\r\n * @property {string} [message] - A message is received from something.  ie: WebSocket, Web Worker,\r\n * iframe, parent window or other event source.\r\n * @property {string} [drag] - Handles mouseover events generated when an element or text selection\r\n * is being dragged (every 350ms).\r\n * @property {string} [dragend] - Handles mouseover events generated when a drag operation is being\r\n * ended (by releasing a mouse button or hitting the escape key).\r\n * @property {string} [dragenter] - Handles mouseover events generated when a dragged element or\r\n * text selection enters a valid drop target.\r\n * @property {string} [dragleave] - Handles mouseover events generated when a dragged element or\r\n * text selection leaves a valid drop target.\r\n * @property {string} [dragover] - Handles mouseover events generated when an n element or text\r\n * selection is being dragged over a valid drop target (every 350ms).\r\n * @property {string} [dragstart] - Handles mouseover events generated when the user starts\r\n * dragging an element or text selection.\r\n * @property {string} [drop] - Handles mouseover events generated when an element is dropped\r\n * on a valid drop target.\r\n *\r\n * @property {string} [touchcancel] - Handles mouseover events generated when a touch point\r\n * has been disrupted in an implementation-specific manners (too many touch points for example).\r\n * @property {string} [touchend] - Handles mouseover events generated when a touch point is\r\n * removed from the touch surface.\r\n * @property {string} [touchenter] - Handles mouseover events generated when a touch point\r\n * is moved onto the interactive area of an element.\r\n * @property {string} [touchleave] - Handles mouseover events generated when a touch point\r\n * is moved off the interactive area of an element.\r\n * @property {string} [touchmove] - Handles mouseover events generated when a touch point\r\n * is moved along the touch surface.\r\n * @property {string} [touchstart] - Handles mouseover events generated when a touch point\r\n * is placed on the touch surface.\r\n *\r\n */\r\n\r\n\r\n/**\r\n *\r\n * A D3 line specification.\r\n *\r\n * @typedef {Object} d3line_spec\r\n *\r\n * @property {d3point_spec} [start] - The starting point for this line.\r\n * @property {d3_point_spec} [end] - The ending point for this line.\r\n * @property {d3stroke_spec} [strokc] - The stroke to be used when drawing this line.\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * A D3 point specification.\r\n *\r\n * @typedef {Object} d3point_spec\r\n *\r\n * @property {number} [x] - The starting point for this line.\r\n * @property {number} [y] - The ending point for this line.\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * A D3 circle specification.\r\n *\r\n * @typedef {Object} d3point_spec\r\n *\r\n * @property {number} [cx] - The x-coordinate of the center point of this circle.\r\n * @property {number} [cy] - The y-coordinate of the center point of this circle.\r\n * @property {number} [r] - The radius of the circle.\r\n * @property {d3fill_spec} [fill] - The circle's fill.\r\n * @property {d3stroke_spec} [stroke] - The circle's stroke.\r\n * @property {string} [transform] - A transform, if any, to be applied to this circle.\r\n * @property {string} [title] - The title of the circle.\r\n * @property {d3events_spec} [events] - Any events to be associated with this circle.\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * A D3 tick specification.\r\n *\r\n * @typedef {Object} d3tick_spec\r\n *\r\n * @property {number} [count] - The number of ticks to dra.\r\n * @property {object} [size] - The size of the tick.\r\n * @property {number} [size.major] - The length of the major ticks.\r\n * @property {number} [size.minor] - The length of the minor ticks.\r\n * @property {number} [size.end] - The length of the ticks at the ends of the axis.\r\n * @property {number} [padding] - The padding for ticks.\r\n * @property {string} [format] - The format to be applied to each tick label.\r\n * @property {d3text_spec} [label] - The specification for the appearance of tick\r\n * labels.\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * A D3 path specification.\r\n *\r\n * @typedef {Object} d3path_spec\r\n *\r\n * @property {d3fill_spec} [fill] - The fill to apply when drawing this path.\r\n * @property {d3stroke_spec} [stroke] - The stroke to use when drawing this path.\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * A D3 fill specification.\r\n * @typedef {Object} d3fill_spec\r\n *\r\n * @property {string} [fillColor=grey] - The color of this fill.\r\n * @property {float} [opacity=1] - The opacity of this fill in the range of\r\n * where 0 is invisible and 1 represents 100% opaque fill. [0, 1]\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * A D3 link specification.\r\n * @typedef {Object} d3link_spec\r\n *\r\n * @property {d3fill} [fill] - The fill to be used for this link.\r\n * @property {d3stroke} [stroke] - The stroke to be used for this link.\r\n * @property {string} [transform] - The transform to apply to this link.\r\n * @property {object} d - The data to associate with this link.\r\n * @property {d3events} [events] - The events to associate with this link.\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * This is the base constructor for all dex components.  It provides some of the common\r\n * functionality such as attribute getters/setters, ability to publish and subscribe\r\n * events as well as the ability for the user to provide customized settings for any\r\n * component configuration value.\r\n *\r\n * @constructor\r\n * @classdesc This interface provides a contract for dex components to implement.\r\n *\r\n * @name dex.component\r\n *\r\n * @param userConfig A map containing the various options the user wishes to override.\r\n * @param defaultConfig A map containing the default configuration for this component.\r\n *\r\n */\r\nmodule.exports = function (userConfig, defaultConfig) {\r\n  userConfig = userConfig || {};\r\n  defaultConfig = defaultConfig || {};\r\n\r\n  this.debug = false;\r\n\r\n  // Allows component construction from other components.\r\n  if (userConfig.hasOwnProperty('config')) {\r\n    this.config = dex.config.expandAndOverlay(userConfig.config, defaultConfig);\r\n  }\r\n  // Else, we have a configuration.\r\n  else {\r\n    this.config = dex.config.expandAndOverlay(userConfig, defaultConfig);\r\n  }\r\n\r\n  dex.console.log(\"dex.component Configuration\", this.config);\r\n\r\n  if (!this.config.channel) {\r\n    this.config.channel = (this.config.parent || \"#parent\") + \"/\" +\r\n    (this.config.id || \"unknown-id\");\r\n  }\r\n\r\n  /**\r\n   * This method provides getter/setter access for the configuration of a\r\n   * DexComponent.\r\n   *\r\n   * Names can express hierarchy.  An attribute named 'a' may have a\r\n   * child attribute named 'b'.  In this case, the name of attribute\r\n   * 'a' is simply 'a'.  The name of attribute 'b' would be 'a.b'.\r\n   *\r\n   * attr(name) Retrieve retrieve the current value of the attribute with\r\n   * matching name.\r\n   *\r\n   * attr(name, value) Set the attribute with the matching name to the\r\n   * specified value.\r\n   *\r\n   * @method dex.component.attr\r\n   *\r\n   * @param name The name of the attribute.\r\n   * @param value The value of the attribute.\r\n   *\r\n   * @example {@lang javascript}\r\n   * // Set an attribute named \"foo\" to \"bar\"\r\n   * myComponent.attr(\"foo\", \"bar\");\r\n   *\r\n   * // Returns \"bar\"\r\n   * myComponent.attr(\"foo\");\r\n   *\r\n   * // Set an attribute named \"foo\" which belongs to an object named\r\n   * // nested which in turn belongs to myComponent.\r\n   * myComponent.attr(\"nested.foo\", \"bar\");\r\n   *\r\n   * // Returns \"bar\"\r\n   * myComponent.attr(\"nested.foo\");\r\n   *\r\n   * // Does nothing, returns myComponent\r\n   * myComponent.attr();\r\n   *\r\n   * @returns {string|component} If only name is provided, attr will return the value of\r\n   * the requested attribute.  If both name and value are provided, then\r\n   * the attribute corresponding to the name will be set to the supplied\r\n   * value and the component itself will be returned.\r\n   */\r\n  this.attr = function (name, value) {\r\n    if (arguments.length == 0) {\r\n      return this.config;\r\n    }\r\n    else if (arguments.length == 1) {\r\n      // REM: Need to getHierarchical\r\n      return this.config[name];\r\n    }\r\n    else if (arguments.length == 2) {\r\n      //console.log(\"Setting Hieararchical: \" + name + \"=\" + value);\r\n      //console.dir(this.config);\r\n\r\n      // This will handle the setting of a single attribute\r\n      dex.object.setHierarchical(this.config, name, value, '.');\r\n    }\r\n    return this;\r\n  };\r\n\r\n  /**\r\n   * Subscribe this component to the events of type eventTYpe\r\n   * generated by the source this.  When events are received,\r\n   * invoke the callback.\r\n   *\r\n   * @method dex.this.subscribe\r\n   *\r\n   * @param {component} source - The source component\r\n   * @param {string} eventType - The name of the event we are subscribing to.\r\n   * @param callback - The function to be invoked when this event is\r\n   * received.\r\n   *\r\n   * @returns {handle|false} False if function is called incorrectly.\r\n   * Otherwise, the function returns a handle which can later be used\r\n   * to unsubscribe to the events.\r\n   *\r\n   */\r\n  this.subscribe = function (source, eventType, callback) {\r\n    if (arguments.length == 3) {\r\n      var channel = source.config.channel + '/' + eventType;\r\n\r\n      dex.console.log(\"subscribe to \" + channel);\r\n      if (arguments.length < 3) {\r\n        dex.console.log(\"failed\");\r\n        return false;\r\n      }\r\n      return dex.bus.subscribe(channel, callback);\r\n    }\r\n    else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  /**\r\n   *\r\n   * Unsubscribe this component.\r\n   *\r\n   * @method dex.component.unsubscribe\r\n   *\r\n   * @param handle - The handle attained via subscribe.\r\n   *\r\n   */\r\n  this.unsubscribe = function (handle) {\r\n    dex.bus.unsubscribe(handle);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * Publish an event to the component's subscribers.\r\n   *\r\n   * @method dex.component.publish\r\n   *\r\n   * @param event - The event to publish.  An event can be any object, however,\r\n   * it must define a property named \"type\".\r\n   * @param event.type - The type of the event we are publishing.\r\n   *\r\n   */\r\n  this.publish = function (event) {\r\n    var channel;\r\n\r\n    if (!event || !event.type) {\r\n      dex.console.warn(\"publish of event to \" + this.channel + \" failed.\");\r\n      dex.bus.publish(\"error\", {\r\n        type          : \"error\",\r\n        \"description\" : \"Error publishing event: '\" + event + \"' to '\" + this.channel + \"'\"\r\n      });\r\n    }\r\n    else {\r\n      channel = this.config.channel + '/' + event.type;\r\n      dex.console.log(\"publish to \" + channel);\r\n      dex.bus.publish(channel, event);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *\r\n   * A default no-op implementation of render.  Subclasses should\r\n   * override this method with one which provides an initial rendering\r\n   * of their specific component.  This is a great place to put\r\n   * one-time only initialization logic.\r\n   *\r\n   * @method dex.component.render\r\n   *\r\n   */\r\n  this.render = function () {\r\n    console.log(\"Unimplemented routine: render()\");\r\n  };\r\n\r\n  /**\r\n   *\r\n   * A default no-op implementation of update.  This will update the\r\n   * current component relative to any new setting or data changes.\r\n   *\r\n   * @method dex.component.update\r\n   *\r\n   */\r\n  this.update = function () {\r\n    console.log(\"Unimplemented routine: update()\");\r\n  };\r\n};","/**\r\n *\r\n * Config module.\r\n * @module config\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * This routine supports a shorthand notation allowing the\r\n * user to specify deeply nested configuration options without\r\n * having to deal with nested json structures.\r\n *\r\n * Options like:\r\n *\r\n * {\r\n *   'cell' : {\r\n *     'rect' : {\r\n *       'width' : 10,\r\n *       'height' : 20,\r\n *       'events' : {\r\n *         'mouseover' : function(d) { console.log(\"MouseOver: \" + d); }\r\n *       }\r\n *     }\r\n *   }\r\n * }\r\n *\r\n * Can now be described more succinctly and more readably as:\r\n *\r\n * {\r\n *   'cell.rect.width'            : 10,\r\n *   'cell.rect.height'           : 20,\r\n *   'cell.rect.events.mouseover' : function(d) { console.log(\"Mouseover: \" + d); }\r\n * }\r\n *\r\n * Or a hybrid strategy can be used:\r\n *\r\n * {\r\n *   'cell.rect' : {\r\n *     'width' : 10,\r\n *     'height' : 20,\r\n *     'events.mouseover' : function(d) { console.log(\"Mouseover: \" + d); }\r\n *   }\r\n * }\r\n *\r\n * @param {object} config The configuration to expand.\r\n * @returns {*} The expanded configuration.  The original configuration\r\n *   is left untouched.\r\n *\r\n */\r\nexports.expand = function expand(config) {\r\n  var name, ci;\r\n  var expanded = {};\r\n\r\n  // We have nothing, return nothing.\r\n  if (!config) {\r\n    return config;\r\n  }\r\n\r\n  //dex.console.log(\"dex.config.expand(config=\", config);\r\n\r\n  for (var name in config) {\r\n    if (config.hasOwnProperty(name)) {\r\n      // Name contains hierarchy:\r\n      if (name && name.indexOf('.') > -1) {\r\n        expanded[name] = config[name];\r\n        dex.object.setHierarchical(expanded, name,\r\n          dex.object.clone(expanded[name]), '.');\r\n        delete expanded[name];\r\n      }\r\n      // Simple name\r\n      else {\r\n        // If the target is an object with no children, clone it.\r\n        if (dex.object.isEmpty(config[name])) {\r\n          //dex.console.log(\"SET PRIMITIVE: \" + name + \"=\" + config[name]);\r\n          expanded[name] = dex.object.clone(config[name]);\r\n          //expanded[name] = config[name];\r\n        }\r\n        else {\r\n          //dex.console.log(\"SET OBJECT: \" + name + \" to the expansion of\", config[name]);\r\n          expanded[name] = dex.config.expand(config[name]);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  //dex.console.log(\"CONFIG\", config, \"EXPANDED\", expanded);\r\n  return expanded;\r\n};\r\n\r\n/**\r\n *\r\n * This routine will expand hiearchically delimited names such as\r\n * foo.bar into a structure { foo : { bar : value}}.  It will delete\r\n * the hierarchical name and overwrite the value into the proper\r\n * location leaving any previous object properties undisturbed.\r\n *\r\n * @param {Object} config The configuration which we will expand.\r\n *\r\n */\r\n\r\n/*\r\n exports.expand_deprecate = function expand(config) {\r\n var name,\r\n ci,\r\n expanded;\r\n\r\n // We have nothing, return nothing.\r\n if (!config) {\r\n return config;\r\n }\r\n\r\n //dex.console.log(\"dex.config.expand(config=\", config);\r\n\r\n // Make a clone of the previous configuration.\r\n expanded = dex.object.clone(config);\r\n\r\n // Iterate over the property names.\r\n for (name in config) {\r\n // If this is our property the process it, otherwise ignore.\r\n if (config.hasOwnProperty(name)) {\r\n // The property name is non-null.\r\n if (name) {\r\n // Determine character index.\r\n ci = name.indexOf('.');\r\n }\r\n else {\r\n // Default to -1\r\n ci = -1;\r\n }\r\n\r\n // if Character index is > -1, we have a hierarchical name.\r\n // Otherwise do nothing, copying was already handled in the\r\n // cloning activity.\r\n if (ci > -1) {\r\n // Set it...\r\n dex.object.setHierarchical(expanded, name,\r\n dex.object.clone(expanded[name]), '.');\r\n // Delete the old name.\r\n delete expanded[name];\r\n }\r\n }\r\n }\r\n\r\n //dex.console.log(\"CONFIG\", config, \"EXPANDED\", expanded);\r\n return expanded;\r\n };\r\n */\r\n\r\n/**\r\n *\r\n * This routine will take two hierarchies, top and bottom, and expand dot ('.')\r\n * delimited names such as: 'foo.bar.biz.baz' into a structure:\r\n * { 'foo' : { 'bar' : { 'biz' : 'baz' }}}\r\n * It will then overlay the top hierarchy onto the bottom one.  This is useful\r\n * for configuring objects based upon a default configuration while allowing\r\n * the client to conveniently override these defaults as needed.\r\n *\r\n * @param {object} top - The top object hierarchy.\r\n * @param {object} bottom - The bottom, base object hierarchy.\r\n * @returns {object} - A new object representing the expanded top object\r\n * hierarchy overlaid on top of the expanded bottom object hierarchy.\r\n *\r\n */\r\nexports.expandAndOverlay = function expandAndOverlay(top, bottom) {\r\n  //dex.console.log(\r\n  //dex.config.getCallerString(arguments.callee.caller),\r\n  //\"TOP\", top,\r\n  //\"BOTTOM\", bottom,\r\n  //\"EXPANDED TOP\", dex.config.expand(top),\r\n  //\"EXPANDED BOTTOM\", dex.config.expand(bottom));\r\n  return dex.object.overlay(dex.config.expand(top),\r\n    dex.config.expand(bottom));\r\n};\r\n\r\n/**\r\n *\r\n * Return the configuration for a font after the user's customizations\r\n * have been applied.\r\n *\r\n * @param {d3font_spec} custom - The user customizations.\r\n * @returns {d3font_spec} - An object containing the font's specifications\r\n * after the user's customizations have been applied.\r\n *\r\n */\r\nexports.font = function font(custom) {\r\n  var defaults =\r\n  {\r\n    'decoration'    : 'none',\r\n    'family'        : 'sans-serif',\r\n    'letterSpacing' : 'normal',\r\n    'size'          : 14,\r\n    'style'         : 'normal',\r\n    'weight'        : 'normal',\r\n    'wordSpacing'   : 'normal',\r\n    'variant'       : 'normal'\r\n  };\r\n\r\n  var fontSpec = dex.config.expandAndOverlay(custom, defaults);\r\n  return fontSpec;\r\n};\r\n\r\n/**\r\n *\r\n * Configure the given font with the supplied font specification.\r\n *\r\n * @param {object} node - The node to be configured.\r\n * @param {d3font_spec} fontSpec - The font specification to be applied.\r\n *\r\n * @returns {*} The node after having the font specification applied.\r\n *\r\n */\r\nexports.configureFont = function configureFont(node, fontSpec, i) {\r\n  //dex.console.log(\"CONFIG-FONT: \" + i);\r\n  if (fontSpec) {\r\n    dex.config.setAttr(node, 'font-family', fontSpec.family, i);\r\n    dex.config.setAttr(node, 'font-size', fontSpec.size, i);\r\n    dex.config.setAttr(node, 'font-weight', fontSpec.weight, i);\r\n    dex.config.setAttr(node, 'font-style', fontSpec.style, i);\r\n    dex.config.setAttr(node, 'text-decoration', fontSpec.decoration, i);\r\n\r\n    dex.config.setAttr(node, 'word-spacing', fontSpec.wordSpacing, i);\r\n    dex.config.setAttr(node, 'letter-spacing', fontSpec.letterSpacing, i);\r\n    dex.config.setAttr(node, 'variant', fontSpec.variant, i);\r\n  }\r\n  return node;\r\n};\r\n\r\n/**\r\n *\r\n * Construct a text speficiation.\r\n *\r\n * @param {d3text_spec} custom - The user's adjustments to the default text\r\n * specification.\r\n *\r\n * @returns {d3text_spec} A revised text specification after having applied\r\n * the user's modfiications.\r\n *\r\n */\r\nexports.text = function text(custom) {\r\n  var defaults =\r\n  {\r\n    'font'                     : dex.config.font(),\r\n    'x'                        : 0,\r\n    'y'                        : 0,\r\n    'textLength'               : undefined,\r\n    'lengthAdjust'             : undefined,\r\n    'transform'                : '',\r\n    'glyphOrientationVertical' : undefined,\r\n    'text'                     : undefined,\r\n    'dx'                       : 0,\r\n    'dy'                       : 0,\r\n    'writingMode'              : undefined,\r\n    'anchor'                   : 'start',\r\n    'fill'                     : dex.config.fill(),\r\n    'format'                   : undefined,\r\n    'events'                   : dex.config.events()\r\n  };\r\n\r\n  var textSpec = dex.config.expandAndOverlay(custom, defaults);\r\n  return textSpec;\r\n};\r\n\r\n/**\r\n *\r\n * This routine will dynamically configure an SVG text entity based upon the\r\n * supplied configuration.\r\n *\r\n * @param {object} node The SVG text node to be configured.\r\n * @param {d3text_spec} textSpec The text specification for this node.\r\n *\r\n * @returns {*} The node after having applied the text specification.\r\n *\r\n */\r\nexports.configureText = function configureText(node, textSpec, i) {\r\n  //dex.console.log(\"CONFIG-TEXT: \" + i);\r\n  if (textSpec) {\r\n    dex.config.setAttr(node, \"x\", textSpec.x, i);\r\n    dex.config.setAttr(node, \"y\", textSpec.y, i);\r\n    dex.config.setAttr(node, \"dx\", textSpec.dx, i);\r\n    dex.config.setAttr(node, \"dy\", textSpec.dy, i);\r\n    dex.config.setStyle(node, \"text-anchor\", textSpec.anchor, i);\r\n    dex.config.configureFont(node, textSpec.font, i);\r\n    dex.config.setAttr(node, 'textLength', textSpec.textLength, i);\r\n    dex.config.setAttr(node, 'lengthAdjust', textSpec.lengthAdjust, i);\r\n    dex.config.setAttr(node, 'transform', textSpec.transform, i);\r\n    dex.config.setAttr(node, 'glyph-orientation-vertical',\r\n      textSpec.glyphOrientationVertical, i);\r\n    dex.config.setAttr(node, 'writing-mode', textSpec.writingMode, i);\r\n    dex.config.callIfDefined(node, 'text', textSpec.text, i);\r\n    dex.config.configureFill(node, textSpec.fill, i);\r\n    dex.config.configureEvents(node, textSpec.events, i);\r\n  }\r\n  return node;\r\n};\r\n\r\n/**\r\n *\r\n * Construct a stroke specification.\r\n *\r\n * @param {d3text_spec} strokeSpec - The user's customizations to the specification.\r\n *\r\n * @returns {d3text_spec} The stroke specification after having applied the user's\r\n * configuration.\r\n *\r\n */\r\nexports.stroke = function stroke(strokeSpec) {\r\n  var defaults =\r\n  {\r\n    'width'     : 1,\r\n    'color'     : \"black\",\r\n    'opacity'   : 1,\r\n    'dasharray' : '',\r\n    'transform' : ''\r\n  };\r\n\r\n  var config = dex.config.expandAndOverlay(strokeSpec, defaults);\r\n  return config;\r\n};\r\n\r\n/**\r\n *\r\n * Apply a stroke specification to a node.\r\n *\r\n * @param {object} node - The node to be configured.\r\n * @param {d3stroke_spec} strokeSpec - The stroke specification to be applied.\r\n * @returns The newly configured node.\r\n */\r\nexports.configureStroke = function configureStroke(node, strokeSpec, i) {\r\n  if (strokeSpec) {\r\n    dex.config.setAttr(node, \"stroke\", strokeSpec.color, i);\r\n    dex.config.setStyle(node, 'stroke-width', strokeSpec.width, i);\r\n    dex.config.setStyle(node, 'stroke-opacity', strokeSpec.opacity, i);\r\n    dex.config.setStyle(node, 'stroke-dasharray', strokeSpec.dasharray, i);\r\n    dex.config.setAttr(node, 'transform', strokeSpec.transform, i);\r\n  }\r\n  return node;\r\n};\r\n/**\r\n *\r\n * Construct a fill specification which allow the user to override any\r\n * its settings.\r\n *\r\n * @param {d3fill_spec} custom - The user's customizations.\r\n * @returns {d3fill_spec} A fill specification which has applied the user's\r\n * customizations.\r\n *\r\n */\r\nexports.fill = function fill(custom) {\r\n  var defaults =\r\n  {\r\n    'fillColor'   : \"grey\",\r\n    'fillOpacity' : 1\r\n  };\r\n\r\n  var config = dex.config.expandAndOverlay(custom, defaults);\r\n  return config;\r\n};\r\n\r\n/**\r\n *\r\n * Apply a fill specification to a node.\r\n *\r\n * @param {object} node - The node to be configured.\r\n * @param {d3fill_spec} config - The fill specification.\r\n *\r\n * @returns {object} The node after having applied the fill specification.\r\n *\r\n */\r\nexports.configureFill = function configureFill(node, config, i) {\r\n  if (config) {\r\n    dex.config.setStyle(node, 'fill', config.fillColor, i);\r\n    dex.config.setStyle(node, 'fill-opacity', config.fillOpacity, i);\r\n  }\r\n  return node;\r\n};\r\n\r\n/**\r\n *\r\n * Construct a link specification which allows the user to override any\r\n * of the settings.\r\n *\r\n * @param {d3link_spec} custom - The users customizations.\r\n *\r\n * @returns {d3link_spec} A link specification generated by combining the\r\n * default with the user's customizations.\r\n *\r\n */\r\nexports.link = function link(custom) {\r\n  var defaults =\r\n  {\r\n    'fill'      : dex.config.fill(),\r\n    'stroke'    : dex.config.stroke(),\r\n    'transform' : '',\r\n    'd'         : undefined,\r\n    'events'    : dex.config.events()\r\n  };\r\n\r\n  var config = dex.config.expandAndOverlay(custom, defaults);\r\n  return config;\r\n};\r\n\r\n/**\r\n *\r\n * Apply a link specification to a node.\r\n *\r\n * @param {object} node - The node to apply the specification to.\r\n * @param {d3link_spec} config - The link specification.\r\n *\r\n * @returns {object} The node after having applied the specification.\r\n *\r\n */\r\nexports.configureLink = function configureLink(node, config, i) {\r\n  if (config) {\r\n    dex.config.configureStroke(node, config.stroke, i);\r\n    dex.config.configureFill(node, config.fill, i);\r\n    dex.config.setAttr(node, 'transform', config.transform, i);\r\n    dex.config.setAttr(node, 'd', config.d, i);\r\n    dex.config.configureEvents(node, config.events, i);\r\n  }\r\n  return node;\r\n}\r\n\r\n/**\r\n *\r\n * Construct a rectangle specification which allows the user to override any\r\n * of the settings.\r\n *\r\n * @param {d3rect_spec} custom - The users customizations.\r\n *\r\n * @returns {d3rect_spec} A rectangle specification generated by combining the\r\n * default with the user's customizations.\r\n *\r\n */\r\nexports.rectangle = function rectangle(custom) {\r\n  var config =\r\n  {\r\n    'width'     : 50,\r\n    'height'    : 50,\r\n    'x'         : 0,\r\n    'y'         : 0,\r\n    'rx'        : 0,\r\n    'ry'        : 0,\r\n    'stroke'    : dex.config.stroke(),\r\n    'opacity'   : 1,\r\n    'color'     : d3.scale.category20(),\r\n    'transform' : undefined,\r\n    'events'    : dex.config.events()\r\n  };\r\n  if (custom) {\r\n    config = dex.object.overlay(custom, config);\r\n  }\r\n  return config;\r\n};\r\n\r\nexports.configureRectangle = function configureRectangle(node, config, i) {\r\n  if (config) {\r\n    dex.config.setAttr(node, 'width', config.width, i);\r\n    dex.config.setAttr(node, 'height', config.height, i);\r\n    dex.config.setAttr(node, 'x', config.x, i);\r\n    dex.config.setAttr(node, 'y', config.y, i);\r\n    dex.config.setAttr(node, 'rx', config.rx, i);\r\n    dex.config.setAttr(node, 'ry', config.ry, i);\r\n    dex.config.setAttr(node, 'opacity', config.opacity, i);\r\n    dex.config.setAttr(node, 'fill', config.color, i);\r\n    dex.config.setAttr(node, 'transform', config.transform, i);\r\n    dex.config.configureStroke(node, config.stroke, i);\r\n    dex.config.configureEvents(node, config.events, i);\r\n  }\r\n  return node;\r\n};\r\n\r\n/**\r\n *\r\n * Construct an events specification which allows the user to override any\r\n * of the settings.\r\n *\r\n * @param {d3events_spec} custom - The users customizations.\r\n *\r\n * @returns {d3events_spec} An events specification generated by combining the\r\n * default with the user's customizations.\r\n *\r\n */\r\nexports.events = function events(custom) {\r\n  var defaults =\r\n  {\r\n    'mouseover' : function (d) {\r\n      //console.log(\"Default mouseover\");\r\n    }\r\n  };\r\n  var config = defaults;\r\n\r\n  if (custom) {\r\n    config = dex.object.overlay(custom, defaults);\r\n  }\r\n  return config;\r\n};\r\n\r\nexports.configureEvents = function configureEvents(node, config, i) {\r\n  //dex.console.log(\"Configure Events\", config, i);\r\n  if (config) {\r\n    for (var key in config) {\r\n      //dex.console.log(\"KEY\", key, \"VALUE\", config[key]);\r\n      dex.config.setEventHandler(node, key, config[key], i);\r\n    }\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\n/**\r\n *\r\n * Construct an line specification which allows the user to override any\r\n * of the settings.\r\n *\r\n * @param {d3line_spec} custom - The users customizations.\r\n *\r\n * @returns {d3line_spec} A line specification generated by combining the\r\n * default with the user's customizations.\r\n *\r\n */\r\nexports.line = function line(custom) {\r\n  var defaults =\r\n  {\r\n    'start'       : dex.config.point(),\r\n    'end'         : dex.config.point(),\r\n    'stroke'      : dex.config.stroke(),\r\n    'fill'        : dex.config.fill(),\r\n    'interpolate' : undefined\r\n  };\r\n  var config = dex.config.expandAndOverlay(custom, defaults);\r\n  return config;\r\n};\r\n\r\nexports.configureLine = function configureLine(node, config, i) {\r\n  if (config) {\r\n    dex.config.setAttr(node, 'x1', config.start.x, i);\r\n    dex.config.setAttr(node, 'y1', config.start.y, i);\r\n    dex.config.setAttr(node, 'x2', config.end.x, i);\r\n    dex.config.setAttr(node, 'y2', config.end.y, i);\r\n    dex.config.configureStroke(node, config.stroke, i);\r\n    dex.config.configureFill(node, config.fill, i);\r\n    if (config.interpolate) {\r\n      //dex.console.log(\"interpolate\", node, config, i);\r\n      node.interpolate(config.interpolate);\r\n      // I think this is closer to correct....but breaks the motion line chart\r\n      //node.interpolate(dex.config.optionValue(config.interpolate, i));\r\n    }\r\n  }\r\n  return node;\r\n};\r\n\r\n/**\r\n *\r\n * Construct an path specification which allows the user to override any\r\n * of the settings.\r\n *\r\n * @param {d3path_spec} custom - The users customizations.\r\n *\r\n * @returns {d3path_spec} A path specification generated by combining the\r\n * default with the user's customizations.\r\n *\r\n */\r\nexports.path = function path(custom) {\r\n  var defaults =\r\n  {\r\n    'fill'   : dex.config.fill(),\r\n    'stroke' : dex.config.stroke()\r\n  };\r\n  var config = dex.config.expandAndOverlay(custom, defaults);\r\n  return config;\r\n};\r\n\r\nexports.configurePath = function configurePath(node, config, i) {\r\n  if (config) {\r\n    dex.config.configureFill(node, config.fill, i);\r\n    dex.config.configureStroke(node, config.stroke, i);\r\n  }\r\n  return node;\r\n};\r\n\r\nexports.getCallers = function getCallers(caller) {\r\n  var callers = [];\r\n  var currentCaller = caller;\r\n  for (; currentCaller; currentCaller = currentCaller.caller) {\r\n    if (currentCaller.name) {\r\n      callers.push(currentCaller.name);\r\n    }\r\n  }\r\n\r\n  return callers.reverse();\r\n}\r\n\r\nexports.getCallerString = function getCallerString(caller) {\r\n  return dex.config.getCallers(caller).join(\"->\");\r\n}\r\n\r\nexports.setEventHandler = function setEventHandler(node, eventType, eventHandler, i) {\r\n  var callerStr = dex.config.getCallerString(arguments.callee.caller);\r\n\r\n  //dex.console.debug(callerStr + \": setEventHandler(node=\" + node + \", eventType=\" + eventType + \", eventHandler=\" + eventHandler);\r\n  if (!node) {\r\n    dex.console.warn(callerStr + \": dex.config.setEventHandler(eventType='\" + eventType + \"eventHandler=\" + eventHandler + \") : node is null.\");\r\n    return node;\r\n  }\r\n  if (!dex.object.isFunction(node.on)) {\r\n    dex.console.warn(callerStr + \": dex.config.setEventHandler(eventType='\" + eventType + \"', eventHandler='\" + eventHandler +\r\n    \"') : target node is missing function: node.on(eventType,eventHandler).  Node dump:\", node);\r\n    return node;\r\n  }\r\n  if (typeof eventHandler != 'undefined') {\r\n    dex.console.debug(callerStr + \": Set Event Handler: '\" + eventType + \"'='\" + eventHandler + \"'\");\r\n    node.on(eventType, eventHandler);\r\n  }\r\n  else {\r\n    dex.console.debug(callerStr += \": Undefined Event Handler: '\" + eventType + \"'='\" + eventHandler + \"'\");\r\n  }\r\n  return node;\r\n};\r\n\r\nexports.setAttr = function setAttr(node, name, value, i) {\r\n  var callerStr = dex.config.getCallerString(arguments.callee.caller);\r\n  if (!node) {\r\n    dex.console.warn(callerStr + \": dex.config.setAttr(name='\" + name + \"value=\" + value + \") : node is null.\");\r\n    return node;\r\n  }\r\n  if (!dex.object.isFunction(node.attr)) {\r\n    dex.console.warn(callerStr + \": dex.config.setAttr(name='\" + name + \"', value='\" + value +\r\n    \"') : target node is missing function: node.attr.  Node dump:\", node);\r\n    return node;\r\n  }\r\n  if (typeof value != 'undefined') {\r\n    dex.console.debug(callerStr + \": Set Attr: '\" + name + \"'='\" + value + \"'\");\r\n    node.attr(name, dex.config.optionValue(value, i));\r\n  }\r\n  else {\r\n    dex.console.debug(callerStr += \": Undefined Attr: '\" + name + \"'='\" + value + \"'\");\r\n  }\r\n  return node;\r\n};\r\n\r\nexports.setStyle = function setStyle(node, name, value, i) {\r\n  var callerStr = dex.config.getCallerString(arguments.callee.caller);\r\n  if (!node) {\r\n    dex.console.warn(callerStr + \": dex.config.setAttr(name='\" + name + \"value=\" + value + \") : node is null.\");\r\n    return node;\r\n  }\r\n  if (!dex.object.isFunction(node.style)) {\r\n    dex.console.warn(callerStr + \": dex.config.setStyle(name='\" + name + \"', value='\" + value +\r\n    \"') : target node is missing function: node.style.  Node Dump:\", node);\r\n    return node;\r\n  }\r\n  if (typeof value !== 'undefined' && node && dex.object.isFunction(node.style)) {\r\n    dex.console.debug(callerStr + \": Set Style: name='\" + name + \"', Value Dump:\",\r\n      dex.config.optionValue(value, i));\r\n    node.style(name, dex.config.optionValue(value, i));\r\n  }\r\n  else {\r\n    dex.console.debug(callerStr + \": Undefined Style: name='\" + name + \"', Value Dump:\", value);\r\n  }\r\n  return node;\r\n};\r\n\r\nexports.optionValue = function optionValue(option, i) {\r\n  //dex.console.log(\"OPTION-I: \" + i);\r\n\r\n  // Curry value i:\r\n  if (typeof i !== 'undefined') {\r\n    return function (d) {\r\n      //dex.console.log(\"OPTION\", option, \"D\", d, \"I\", i);\r\n      if (dex.object.isFunction(option)) {\r\n        return option(d, i);\r\n      }\r\n      else {\r\n        return option;\r\n      }\r\n    };\r\n  }\r\n  else {\r\n    return function (d, i) {\r\n      //dex.console.log(\"OPTION\", option, \"D\", d, \"I\", i);\r\n      if (dex.object.isFunction(option)) {\r\n        return option(d, i);\r\n      }\r\n      else {\r\n        return option;\r\n      }\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n *\r\n * Is this correct?  It looks suspect to me.\r\n *\r\n * @param node\r\n * @param fn\r\n * @param value\r\n * @param i\r\n * @returns {*}\r\n */\r\nexports.callIfDefined = function callIfDefined(node, fn, value, i) {\r\n  //dex.console.log(\"CALL-IF-DEFINED: fn=\" + fn + \", value=\" + value + \", I=\" + i);\r\n  if (typeof value === 'undefined') {\r\n    //dex.console.log(\"Skipping: \" + fn + \"()\");\r\n  }\r\n  else {\r\n    //dex.console.log(\"Calling: '\" + fn + \"(\" + value + \")\");\r\n    return node[fn](dex.config.optionValue(value, i));\r\n  }\r\n\r\n  return node;\r\n};\r\n\r\n/**\r\n *\r\n * Construct an point specification which allows the user to override any\r\n * of the settings.\r\n *\r\n * @param {d3point_spec} custom - The users customizations.\r\n *\r\n * @returns {d3point_spec} A point specification generated by combining the\r\n * default with the user's customizations.\r\n *\r\n */\r\nexports.point = function point(custom) {\r\n  var config =\r\n  {\r\n    'x' : undefined,\r\n    'y' : undefined\r\n  };\r\n  if (custom) {\r\n    config = dex.object.overlay(custom, config);\r\n  }\r\n  return config;\r\n};\r\n\r\nexports.configurePoint = function configurePoint(node, config, i) {\r\n  if (config) {\r\n    node\r\n      .attr('x', dex.config.optionValue(config.center.cx, i))\r\n      .attr('y', dex.config.optionValue(config.center.cy, i));\r\n  }\r\n  return node;\r\n};\r\n\r\n// Configures: opacity, color, stroke.\r\nexports.configureShapeStyle = function configureShapeStyle(node, config, i) {\r\n  if (config) {\r\n    node\r\n      .call(dex.config.configureStroke, config.stroke, i)\r\n      .attr('opacity', config.opacity)\r\n      .style('fill', config.color);\r\n  }\r\n  return node;\r\n};\r\n\r\n/**\r\n *\r\n * Construct an circle specification which allows the user to override any\r\n * of the settings.\r\n *\r\n * @param {d3circle_spec} custom - The users customizations.\r\n *\r\n * @returns {d3circle_spec} A circle specification generated by combining the\r\n * default with the user's customizations.\r\n *\r\n */\r\nexports.circle = function circle(custom) {\r\n  var config =\r\n  {\r\n    'cx'        : 0,\r\n    'cy'        : 0,\r\n    'r'         : 10,\r\n    'fill'      : dex.config.fill(),\r\n    'stroke'    : dex.config.stroke(),\r\n    'transform' : '',\r\n    'title'     : '',\r\n    'events'    : dex.config.events()\r\n  };\r\n  if (custom) {\r\n    config = dex.object.overlay(custom, config);\r\n  }\r\n  return config;\r\n};\r\n\r\nexports.configureCircle = function configureCircle(node, config, i) {\r\n  if (config) {\r\n    dex.config.setAttr(node, \"r\", config.r, i);\r\n    dex.config.setAttr(node, \"cx\", config.cx, i);\r\n    dex.config.setAttr(node, \"cy\", config.cy, i);\r\n    dex.config.setAttr(node, \"transform\", config.transform, i);\r\n    dex.config.setAttr(node, \"title\", config.title, i);\r\n    dex.config.configureStroke(node, config.stroke, i);\r\n    dex.config.configureFill(node, config.fill, i);\r\n    dex.config.configureEvents(node, config.events, i);\r\n  }\r\n  return node;\r\n};\r\n\r\n/*\r\n exports.configureAxis_deprecated = function configureAxis_deprecated(config) {\r\n var axis;\r\n\r\n if (config) {\r\n var axis = d3.svg.axis()\r\n .ticks(config.tick.count)\r\n .tickSubdivide(config.tick.subdivide)\r\n .tickSize(config.tick.size.major, config.tick.size.minor,\r\n config.tick.size.end)\r\n .tickPadding(config.tick.padding);\r\n\r\n // REM: Horrible way of doing this.  Need a function which\r\n // is more generic and smarter to short circuit stuff like\r\n // this.  But...for now it does what I want.\r\n if (!dex.object.isFunction(config.tick.format)) {\r\n axis.tickFormat(config.tick.format);\r\n }\r\n\r\n axis\r\n .orient(config.orient)\r\n .scale(config.scale);\r\n }\r\n else {\r\n axis = d3.svg.axis();\r\n }\r\n //axis.scale = config.scale;\r\n return axis;\r\n };\r\n */\r\n\r\n/**\r\n *\r\n * Construct an tick specification which allows the user to override any\r\n * of the settings.\r\n *\r\n * @param {d3tick_spec} custom - The users customizations.\r\n *\r\n * @returns {d3tick_spec} A tick specification generated by combining the\r\n * default with the user's customizations.\r\n *\r\n */\r\nexports.tick = function tick(custom) {\r\n  var config =\r\n  {\r\n    'count'     : 5,\r\n    //'tickValues'  : undefined,\r\n    'subdivide' : 3,\r\n    'size'      : {\r\n      'major' : 5,\r\n      'minor' : 3,\r\n      'end'   : 5\r\n    },\r\n    'padding'   : 5,\r\n    'format'    : d3.format(\",d\"),\r\n    'label'     : dex.config.text()\r\n  };\r\n  if (custom) {\r\n    config = dex.object.overlay(custom, config);\r\n  }\r\n  return config;\r\n};\r\n\r\n/*\r\n exports.xaxis_deprecate = function (custom) {\r\n var config =\r\n {\r\n 'scale'  : d3.scale.linear(),\r\n 'orient' : \"bottom\",\r\n 'tick'   : this.tick(),\r\n 'label'  : dex.config.text()\r\n };\r\n if (custom) {\r\n config = dex.object.overlay(custom, config);\r\n }\r\n return config;\r\n };\r\n\r\n exports.yaxis_deprecate = function (custom) {\r\n var config =\r\n {\r\n 'scale'  : d3.scale.linear(),\r\n 'orient' : 'left',\r\n 'tick'   : this.tick(),\r\n 'label'  : dex.config.text({'transform' : 'rotate(-90)'})\r\n };\r\n if (custom) {\r\n config = dex.object.overlay(custom, config);\r\n }\r\n return config;\r\n };\r\n */\r\n\r\nexports.callConditionally = function callConditionally(fn, value, i) {\r\n  //dex.console.log(\"- FN:\" + fn);\r\n  //dex.console.log(\"- VALUE:\" + value);\r\n  if (value !== undefined) {\r\n    //dex.console.log(\"- CALLING: \" + fn + \" of \" + value);\r\n    if (i !== undefined) {\r\n      fn(value, i);\r\n    }\r\n    else {\r\n      fn(value);\r\n    }\r\n  }\r\n  else {\r\n  }\r\n};\r\n\r\n/**\r\n *\r\n * Configure the input parameters for configuring an axis.\r\n * Certain defaults are imposed should the \"custom\" variable\r\n * not specify that parameter.\r\n *\r\n * @param custom The user supplied axis configuration.\r\n *\r\n * @returns {d3axis_spec} The axis specification with\r\n * user supplied overrides applied.\r\n *\r\n */\r\nexports.axis = function axis(custom) {\r\n  var defaults =\r\n  {\r\n    'scale'         : dex.config.scale({'type' : 'linear'}),\r\n    'orient'        : 'bottom',\r\n    'ticks'         : undefined,\r\n    'tickValues'    : undefined,\r\n    'tickSize'      : undefined,\r\n    'innerTickSize' : undefined,\r\n    'outerTickSize' : undefined,\r\n    'tickPadding'   : undefined,\r\n    'tickFormat'    : undefined\r\n    //'label'         : dex.config.text()\r\n  };\r\n\r\n  var axisSpec = dex.config.expandAndOverlay(custom, defaults);\r\n  return axisSpec;\r\n};\r\n\r\n/**\r\n *\r\n * Create an axis with the specified configuration.\r\n *\r\n * @param axis The axis to configure.\r\n * @param config The user specified axis configuration.\r\n *\r\n * @returns {*} The newly configured axis.\r\n */\r\nexports.configureAxis = function configureAxis(axis, config, i) {\r\n  //dex.console.log(\"CONFAXIS: \" + i);\r\n  if (config) {\r\n    [\r\n      'scale',\r\n      'orient',\r\n      'ticks',\r\n      'tickValues',\r\n      'tickSize',\r\n      'innerTickSize',\r\n      'outerTickSize',\r\n      'tickPadding',\r\n      'tickFormat'\r\n    ].forEach(function (fn) {\r\n        //dex.console.log(\"Calling: \" + fn);\r\n        dex.config.callConditionally(axis[fn], config[fn], i);\r\n      });\r\n  }\r\n  return axis;\r\n};\r\n\r\nexports.createAxis = function createAxis(userConfig, i) {\r\n  var config = dex.config.axis(userConfig);\r\n  return dex.config.configureAxis(d3.svg.axis(), config, i);\r\n};\r\n\r\n/**\r\n *\r\n * Construct a {d3axis_spec} based on reasonable defaults with\r\n * user customizations applied on top.\r\n *\r\n * @param custom The user customizations.\r\n *\r\n * @returns {d3scale_spec} The scale specification with\r\n * user supplied overrides applied.\r\n *\r\n */\r\nexports.scale = function scale(custom) {\r\n  var fmap =\r\n  {\r\n    'linear'   : dex.config.linearScale,\r\n    'sqrt'     : dex.config.sqrtScale,\r\n    'pow'      : dex.config.powScale,\r\n    'time'     : dex.config.timeScale,\r\n    'log'      : dex.config.logScale,\r\n    'ordinal'  : dex.config.ordinalScale,\r\n    'quantile' : dex.config.quantileScale,\r\n    'quantize' : dex.config.quantizeScale,\r\n    'identity' : dex.config.identityScale\r\n  };\r\n\r\n  var defaults =\r\n  {\r\n    'type' : 'linear'\r\n  };\r\n\r\n  var config = dex.config.expandAndOverlay(custom, defaults);\r\n\r\n  return fmap[config.type](config);\r\n}\r\n\r\n/**\r\n *\r\n * Given a scale specification, create, configure, and return a\r\n * scale which meets that specification.\r\n *\r\n * @param {d3scale_spec} scaleSpec\r\n * @returns {Object} Returns a d3.scale with the supplied specification.\r\n *\r\n */\r\nexports.createScale = function createScale(scaleSpec) {\r\n  var scale;\r\n\r\n  var fmap =\r\n  {\r\n    'linear'   : d3.scale.linear,\r\n    'sqrt'     : d3.scale.sqrt,\r\n    'pow'      : d3.scale.pow,\r\n    'time'     : d3.time.scale,\r\n    'log'      : d3.scale.log,\r\n    'ordinal'  : d3.scale.ordinal,\r\n    'quantile' : d3.scale.quantile,\r\n    'quantize' : d3.scale.quantize,\r\n    'identity' : d3.scale.identity\r\n  };\r\n\r\n  if (scaleSpec) {\r\n    scale = fmap[scaleSpec.type]();\r\n\r\n    // Since we create a non-parameterized scale, here we parameterize it based upon\r\n    // the supplied specification\r\n    dex.config.configureScale(scale, scaleSpec);\r\n  }\r\n  else {\r\n    scale = d3.scale.linear();\r\n  }\r\n\r\n  return scale;\r\n}\r\n\r\n/**\r\n *\r\n * Construct a linear {d3scale_spec} based on reasonable\r\n * defaults with user customizations applied on top.\r\n *\r\n * @param custom The user customizations.\r\n *\r\n * @returns {d3scale_spec} The linear scale specification with\r\n * user supplied overrides applied.\r\n *\r\n */\r\nexports.linearScale = function linearScale(custom) {\r\n  var defaults =\r\n  {\r\n    'type'        : 'linear',\r\n    'domain'      : [0, 100],\r\n    'range'       : [0, 800],\r\n    'rangeRound'  : undefined,\r\n    'interpolate' : undefined,\r\n    'clamp'       : undefined,\r\n    'nice'        : undefined\r\n  };\r\n\r\n  var linearScaleSpec = dex.config.expandAndOverlay(custom, defaults);\r\n  return linearScaleSpec;\r\n};\r\n\r\n/**\r\n *\r\n * Construct a power {d3scale_spec} based on reasonable\r\n * defaults with user customizations applied on top.\r\n *\r\n * @param custom The user customizations.\r\n *\r\n * @returns {d3scale_spec} The power scale specification with\r\n * user supplied overrides applied.\r\n *\r\n */\r\nexports.powScale = function powScale(custom) {\r\n  var defaults =\r\n  {\r\n    'type'        : 'pow',\r\n    'domain'      : [0, 100],\r\n    'range'       : [0, 800],\r\n    'rangeRound'  : undefined,\r\n    'interpolate' : undefined,\r\n    'clamp'       : undefined,\r\n    'nice'        : undefined\r\n  };\r\n\r\n  var config = dex.config.expandAndOverlay(custom, defaults);\r\n  return config;\r\n};\r\n\r\n/**\r\n *\r\n * Construct a sqrt {d3scale_spec} based on reasonable\r\n * defaults with user customizations applied on top.\r\n *\r\n * @param custom The user customizations.\r\n *\r\n * @returns {d3scale_spec} The sqrt scale specification with\r\n * user supplied overrides applied.\r\n *\r\n */\r\nexports.sqrtScale = function sqrtScale(custom) {\r\n  var defaults =\r\n  {\r\n    'type'        : 'sqrt',\r\n    'domain'      : [0, 100],\r\n    'range'       : [0, 800],\r\n    'rangeRound'  : undefined,\r\n    'interpolate' : undefined,\r\n    'clamp'       : undefined,\r\n    'nice'        : undefined\r\n  };\r\n\r\n  var config = dex.config.expandAndOverlay(custom, defaults);\r\n  return config;\r\n};\r\n\r\n/**\r\n *\r\n * Construct a log {d3scale_spec} based on reasonable\r\n * defaults with user customizations applied on top.\r\n *\r\n * @param custom The user customizations.\r\n *\r\n * @returns {d3scale_spec} The log scale specification with\r\n * user supplied overrides applied.\r\n *\r\n */\r\nexports.logScale = function logScale(custom) {\r\n  var defaults =\r\n  {\r\n    'type'        : 'log',\r\n    'domain'      : [0, 100],\r\n    'range'       : [0, 800],\r\n    'rangeRound'  : undefined,\r\n    'interpolate' : undefined,\r\n    'clamp'       : undefined,\r\n    'nice'        : undefined\r\n  };\r\n\r\n  var logSpec = dex.config.expandAndOverlay(custom, defaults);\r\n  return logSpec;\r\n};\r\n\r\n/**\r\n *\r\n * Construct a ordinal {d3scale_spec} based on reasonable\r\n * defaults with user customizations applied on top.\r\n *\r\n * @param custom - The user customizations.\r\n * @param {object} [custom.rangeRoundBands] -\r\n * @param {object} [custom.rangeBands] -\r\n * @param {object} [custom.rangePoints] - rangePoints(interval [, padding]) : Sets the output range from the specified continuous\r\n * interval. The array interval contains two elements representing the minimum and maximum\r\n * numeric value. This interval is subdivided into n evenly-spaced points, where n is the\r\n * number of (unique) values in the input domain. The first and last point may be offset\r\n * from the edge of the interval according to the specified padding, which defaults to zero.\r\n * The padding is expressed as a multiple of the spacing between points. A reasonable value\r\n * is 1.0, such that the first and last point will be offset from the minimum and maximum\r\n * value by half the distance between points.\r\n * @param {object} [custom.rangeBands] -\r\n *\r\n * @returns {d3scale_spec} The ordinal scale specification with\r\n * user supplied overrides applied.\r\n *\r\n */\r\nexports.ordinalScale = function ordinalScale(custom) {\r\n  var defaults =\r\n  {\r\n    'type'            : 'ordinal',\r\n    'domain'          : undefined,\r\n    'range'           : undefined,\r\n    'rangeRoundBands' : undefined,\r\n    'rangePoints'     : undefined,\r\n    'rangeBands'      : undefined\r\n  };\r\n\r\n  var ordinalSpec = dex.config.expandAndOverlay(custom, defaults);\r\n  return ordinalSpec;\r\n};\r\n\r\nexports.timeScale = function timeScale(custom) {\r\n  var defaults =\r\n  {\r\n    'type'        : 'time',\r\n    'domain'      : undefined,\r\n    'range'       : undefined,\r\n    'rangeRound'  : undefined,\r\n    'interpolate' : undefined,\r\n    'clamp'       : undefined,\r\n    'ticks'       : undefined,\r\n    'tickFormat'  : undefined\r\n  };\r\n\r\n  var config = dex.config.expandAndOverlay(custom, defaults);\r\n  return config;\r\n};\r\n\r\nexports.quantileScale = function quantileScale(custom) {\r\n  var defaults =\r\n  {\r\n    'type'   : 'quantile',\r\n    'domain' : undefined,\r\n    'range'  : undefined\r\n  };\r\n\r\n  var config = dex.config.expandAndOverlay(custom, defaults);\r\n  return config;\r\n};\r\n\r\nexports.quantizeScale = function quantizeScale(custom) {\r\n  var defaults =\r\n  {\r\n    'type'   : 'quantize',\r\n    'domain' : undefined,\r\n    'range'  : undefined\r\n  };\r\n\r\n  var config = dex.config.expandAndOverlay(custom, defaults);\r\n  return config;\r\n};\r\n\r\nexports.identityScale = function identityScale(custom) {\r\n  var defaults =\r\n  {\r\n    'type'   : 'identity',\r\n    'domain' : undefined,\r\n    'range'  : undefined\r\n  };\r\n\r\n  var config = dex.config.expandAndOverlay(custom, defaults);\r\n  return config;\r\n};\r\n\r\nexports.thresholdScale = function thresholdScale(custom) {\r\n  var defaults =\r\n  {\r\n    'type'   : 'threshold',\r\n    'domain' : undefined,\r\n    'range'  : undefined\r\n  };\r\n\r\n  var config = dex.config.expandAndOverlay(custom, defaults);\r\n  return config;\r\n};\r\n\r\nexports.configureScale = function configureScale(scale, config) {\r\n  if (config) {\r\n    for (var property in config) {\r\n      dex.console.trace(\"ConfigureScale Property: '\" + property + \"'\");\r\n      if (config.hasOwnProperty(property) && property !== 'type' && config[property] !== undefined) {\r\n        dex.console.trace(\"Property: '\" + property + \"'\");\r\n        dex.config.callConditionally(scale[property], config[property]);\r\n      }\r\n      else {\r\n        dex.console.debug(\"Missing Property: '\" + property + \"'\");\r\n      }\r\n    }\r\n  }\r\n\r\n  return scale;\r\n};\r\n\r\n//module.exports = config;","/**\r\n *\r\n * This module provides console logging capabilities.\r\n *\r\n * @module console\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * @type {{TRACE: number, DEBUG: number, NORMAL: number, WARN: number, FATAL: number, NONE: number}}\r\n */\r\nvar logLevels = {\r\n  'TRACE'  : 5,\r\n  'DEBUG'  : 4,\r\n  'NORMAL' : 3,\r\n  'WARN'   : 2,\r\n  'FATAL'  : 1,\r\n  'NONE'   : 0\r\n};\r\n\r\nexports.logLevels = logLevels;\r\n\r\nvar logLevel = logLevels.NORMAL;\r\n\r\nexports.logLevel = logLevel;\r\n\r\n////\r\n//\r\n// dex.console : This module provides routines assisting with console output.\r\n//\r\n////\r\n\r\n/**\r\n * Log this message if the current log level is greater than or equal\r\n * to dex.console.logLevel.\r\n *\r\n * @param msgLevel The log level for this message.\r\n * @param msg One or more messages to be logged.  Strings will simply\r\n * use console.log while objects will use console.dir.\r\n *\r\n * @returns {dex.console}\r\n */\r\nexports.logWithLevel = function (msgLevel, msg) {\r\n//  console.log(dex.console.logLevel());\r\n//  console.log(msgLevel);\r\n//  console.dir(msg);\r\n\r\n  if (dex.console.logLevel() >= msgLevel) {\r\n    for (i = 0; i < msg.length; i++) {\r\n      if (typeof msg[i] == 'object') {\r\n        console.dir(msg[i]);\r\n      }\r\n      else {\r\n        console.log(msg[i]);\r\n      }\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n * Write one or more TRACE level messages.\r\n *\r\n * @param msg One or more TRACE messages to log.\r\n *\r\n * @returns {dex.console|*}\r\n */\r\nexports.trace = function () {\r\n  return dex.console.logWithLevel(logLevels.TRACE, arguments)\r\n};\r\n\r\n/**\r\n * Write one or more DEBUG level messages.\r\n *\r\n * @param msg One or more DEBUG messages to log.\r\n *\r\n * @returns {dex.console|*}\r\n */\r\nexports.debug = function () {\r\n  return dex.console.logWithLevel(logLevels.DEBUG, arguments)\r\n};\r\n\r\n/**\r\n * Write one or more NORMAL level messages.\r\n *\r\n * @param msg One or more NORMAL messages to log.\r\n *\r\n * @returns {dex.console|*}\r\n *\r\n */\r\nexports.log = function () {\r\n  //console.log(\"caller is \" + arguments.callee.caller.toString());\r\n  return dex.console.logWithLevel(logLevels.NORMAL, arguments)\r\n};\r\n\r\n/**\r\n * Write one or more WARN level messages.\r\n *\r\n * @param msg One or more WARN messages to log.\r\n *\r\n * @returns {dex.console|*}\r\n *\r\n */\r\nexports.warn = function () {\r\n  return dex.console.logWithLevel(logLevels.WARN, arguments)\r\n};\r\n\r\n/**\r\n * Write one or more FATAL level messages.\r\n *\r\n * @param msg One or more FATAL messages to log.\r\n *\r\n * @returns {dex.console|*}\r\n */\r\nexports.fatal = function () {\r\n  return dex.console.logWithLevel(logLevels.FATAL, arguments)\r\n};\r\n\r\n/**\r\n * This function returns the current log level.\r\n *\r\n * @returns The current log level.\r\n *\r\n */\r\nexports.logLevel = function (_) {\r\n  if (!arguments.length) return logLevel;\r\n  logLevel = logLevels[_];\r\n  return logLevel;\r\n};\r\n\r\nexports.logLevels = function () {\r\n  return logLevels;\r\n};\r\n","/**\r\n *\r\n * This module provides support for dealing with csv structures.  This\r\n * is the core datatype on which dexjs components operate.\r\n *\r\n * @module csv\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * @param header\r\n * @param data\r\n * @returns {{header: *, data: *}}\r\n */\r\nexports.csv = function (header, data) {\r\n  var csv =\r\n  {\r\n    \"header\": header,\r\n    \"data\": data\r\n  };\r\n\r\n  return csv;\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @returns {{header: *, data: {header, data}}}\r\n */\r\nexports.transpose = function (csv) {\r\n  return {\r\n    \"header\": csv.header,\r\n    \"data\": dex.matrix.transpose(csv.data)\r\n  };\r\n};\r\n\r\n/**\r\n * Given a CSV, create a connection matrix suitable for feeding into a chord\r\n * diagram.  Ex, given CSV:\r\n *\r\n * @param csv\r\n * @returns {{header: Array, connections: Array}|*}\r\n *\r\n */\r\nexports.getConnectionMatrix = function (csv) {\r\n  var matrix = [];\r\n  var ri, ci;\r\n  var row;\r\n  var cid;\r\n  var header = [];\r\n  var nameToIndex = {};\r\n  var connectionMatrix;\r\n  var uniques;\r\n  var nameIndices = [];\r\n  var src, dest;\r\n\r\n  // Create a list of unique values to relate to one another.\r\n  uniques = dex.matrix.uniques(csv.data);\r\n  // Flatten them into our header.\r\n  header = dex.matrix.flatten(uniques);\r\n\r\n  // Create a map of names to header index for each column.\r\n  nameToIndex = new Array(uniques.length);\r\n  for (ri = 0, cid = 0; ri < uniques.length; ri++) {\r\n    nameToIndex[ri] =\r\n    {};\r\n    for (ci = 0; ci < uniques[ri].length; ci++) {\r\n      nameToIndex[ri][header[cid]] = cid;\r\n      cid += 1;\r\n    }\r\n  }\r\n\r\n  // Create a N x N matrix of zero values.\r\n  matrix = new Array(header.length);\r\n  for (ri = 0; ri < header.length; ri++) {\r\n    row = new Array(header.length);\r\n    for (ci = 0; ci < header.length; ci++) {\r\n      row[ci] = 0;\r\n    }\r\n    matrix[ri] = row;\r\n  }\r\n  //dex.console.log(\"nameToIndex\", nameToIndex, \"matrix\", matrix);\r\n\r\n  for (ri = 0; ri < csv.data.length; ri++) {\r\n    for (ci = 1; ci < csv.header.length; ci++) {\r\n      src = nameToIndex[ci - 1][csv.data[ri][ci - 1]];\r\n      dest = nameToIndex[ci][csv.data[ri][ci]];\r\n\r\n      //dex.console.log(csv.data[ri][ci-1] + \"<->\" + csv.data[ri][ci], src + \"<->\" + dest);\r\n      matrix[src][dest] = 1;\r\n      matrix[dest][src] = 1;\r\n    }\r\n  }\r\n\r\n  connectionMatrix = {\"header\": header, \"connections\": matrix};\r\n  //dex.console.log(\"Connection Matrix\", connectionMatrix);\r\n  return connectionMatrix;\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @param keyIndex\r\n * @returns {{}}\r\n */\r\nexports.createMap = function (csv, keyIndex) {\r\n  var ri, ci, rowMap, map =\r\n  {};\r\n\r\n  for (ri = 0; ri < csv.data.length; ri += 1) {\r\n    if (csv.data[ri].length === csv.header.length) {\r\n      rowMap =\r\n      {};\r\n\r\n      for (ci = 0; ci < csv.header.length; ci += 1) {\r\n        rowMap[csv.header[ci]] = csv.data[ri][ci];\r\n      }\r\n      map[csv.data[ri][keyIndex]] = rowMap;\r\n    }\r\n  }\r\n  return map;\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @param rowIndex\r\n * @param columnIndex\r\n * @returns {*}\r\n */\r\nexports.toJson = function (csv, rowIndex, columnIndex) {\r\n  var jsonData = [];\r\n  var ri, ci, jsonRow;\r\n\r\n  if (arguments.length >= 3) {\r\n    jsonRow = {};\r\n    jsonRow[csv.header[columnIndex]] = csv.data[rowIndex][columnIndex];\r\n    return jsonRow;\r\n  }\r\n  else if (arguments.length === 2) {\r\n    var jsonRow =\r\n    {};\r\n    for (ci = 0; ci < csv.header.length; ci += 1) {\r\n      jsonRow[csv.header[ci]] = csv.data[rowIndex][ci];\r\n    }\r\n    return jsonRow;\r\n  }\r\n  else if (arguments.length === 1) {\r\n    for (ri = 0; ri < csv.data.length; ri++) {\r\n      var jsonRow =\r\n      {};\r\n      for (ci = 0; ci < csv.header.length; ci++) {\r\n        jsonRow[csv.header[ci]] = csv.data[ri][ci];\r\n        //dex.console.log(csv.header[ci] + \"=\" + csv.data[ri][ci], jsonRow);\r\n      }\r\n      jsonData.push(jsonRow);\r\n    }\r\n  }\r\n  return jsonData;\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @returns {{}}\r\n */\r\nexports.toColumnArrayJson = function (csv) {\r\n  var json = {};\r\n  var ri, ci, jsonRow;\r\n\r\n  if (arguments.length === 1) {\r\n    for (ci = 0; ci < csv.header.length; ci++) {\r\n      json[csv.header[ci]] = [];\r\n    }\r\n\r\n    for (ri = 0; ri < csv.data.length; ri++) {\r\n      for (ci = 0; ci < csv.header.length; ci++) {\r\n        json[csv.header[ci]].push(csv.data[ri][ci]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return json;\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @returns {{header: *, data: *}}\r\n *\r\n */\r\nexports.copy = function (csv) {\r\n  var copy = {\r\n    'header': dex.array.copy(csv.header),\r\n    'data': dex.matrix.copy(csv.data)\r\n  };\r\n  return copy;\r\n};\r\n\r\n/**\r\n *\r\n * A utility transform for dealing with some of D3's more finiky formats.\r\n *\r\n * csv =\r\n * {\r\n * \t header : {C1,C2,C3},\r\n *   data   : [\r\n *     [A,B,C],\r\n *     [A,B,D]\r\n *   ]\r\n * }\r\n * into:\r\n * json =\r\n * {\r\n * \t\"name\"     : rootName,\r\n *  \"category\" : category,\r\n *  \"children\" :\r\n *  [\r\n *    \"children\" :\r\n *     [\r\n *       {\r\n *         \"name\"     : \"A\",\r\n *         \"category\" : \"C1\",\r\n *         \"children\" :\r\n *         [\r\n *           {\r\n * \t           \"name\" : \"B\",\r\n *             \"category\" : \"C2\",\r\n *             \"children\" :\r\n *             [\r\n *               {\r\n *                 \"name\"     : \"C\",\r\n *                 \"category\" : \"C3\",\r\n *                 \"size\"     : 1\r\n *               }\r\n *               {\r\n *                 \"name\"     : \"D\",\r\n *                 \"category\" : \"C3\",\r\n *                 \"size\"     : 1\r\n *               }\r\n *             ]\r\n *           }\r\n *         ]\r\n *       }\r\n *     ]\r\n *  ]\r\n * }\r\n *\r\n * @param {Object} csv\r\n */\r\nexports.toHierarchicalJson = function (csv) {\r\n  var connections = dex.csv.connections(csv);\r\n  return getChildren(connections, 0);\r\n\r\n  function getChildren(connections, depth) {\r\n    //dex.console.log(\"connections:\", connections, \"depth=\"+depth);\r\n    var kids = [], cname;\r\n\r\n    if (typeof connections === 'undefined') {\r\n      return kids;\r\n    }\r\n\r\n    for (cname in connections) {\r\n      //dex.console.log(\"CNAME\", cname);\r\n      if (connections.hasOwnProperty(cname)) {\r\n        kids.push(createChild(cname, csv.header[depth],\r\n          getChildren(connections[cname], depth + 1)));\r\n      }\r\n    }\r\n\r\n    return kids;\r\n  }\r\n\r\n  function createChild(name, category, children) {\r\n    var child =\r\n    {\r\n      \"name\": name,\r\n      \"category\": category,\r\n      \"children\": children\r\n    };\r\n    return child;\r\n  }\r\n};\r\n\r\n/**\r\n *\r\n * Transforms:\r\n * csv =\r\n * {\r\n * \t header : {C1,C2,C3},\r\n *   data   : [\r\n *     [A,B,C],\r\n *     [A,B,D]\r\n *   ]\r\n * }\r\n * into:\r\n * connections =\r\n * { A:{B:{C:{},D:{}}}}\r\n *\r\n * @param {Object} csv\r\n *\r\n */\r\nexports.connections = function (csv) {\r\n  var connections =\r\n  {};\r\n  var ri;\r\n\r\n  for (ri = 0; ri < csv.data.length; ri++) {\r\n    dex.object.connect(connections, csv.data[ri]);\r\n  }\r\n\r\n  //dex.console.log(\"connections:\", connections);\r\n  return connections;\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @param keyIndex\r\n * @returns {{}}\r\n *\r\n */\r\nexports.createRowMap = function (csv, keyIndex) {\r\n  var map =\r\n  {};\r\n  var ri;\r\n\r\n  for (ri = 0; ri < csv.data.length; ri++) {\r\n    if (csv.data[ri].length == csv.header.length) {\r\n      map[csv.data[ri][keyIndex]] = csv.data[ri];\r\n    }\r\n  }\r\n  return map;\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @param columns\r\n * @returns {{}}\r\n */\r\nexports.columnSlice = function (csv, columns) {\r\n  var slice = {};\r\n  slice.header = dex.array.slice(csv.header, columns);\r\n  slice.data = dex.matrix.slice(csv.data, columns);\r\n\r\n  return slice;\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @returns {Array}\r\n */\r\nexports.getNumericColumnNames = function (csv) {\r\n  var possibleNumeric =\r\n  {};\r\n  var i, j, ri, ci;\r\n  var numericColumns = [];\r\n\r\n  for (i = 0; i < csv.header.length; i++) {\r\n    possibleNumeric[csv.header[i]] = true;\r\n  }\r\n\r\n  // Iterate thru the data, skip the header.\r\n  for (ri = 0; ri < csv.data.length; ri++) {\r\n    for (ci = 0; ci < csv.data[ri].length && ci < csv.header.length; ci++) {\r\n      if (possibleNumeric[csv.header[ci]] && !dex.object.isNumeric(csv.data[ri][ci])) {\r\n        possibleNumeric[csv.header[ci]] = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (ci = 0; ci < csv.header.length; ci++) {\r\n    if (possibleNumeric[csv.header[ci]]) {\r\n      numericColumns.push(csv.header[ci]);\r\n    }\r\n  }\r\n\r\n  return numericColumns;\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @returns {Array}\r\n */\r\nexports.guessTypes = function (csv) {\r\n  var i = 0;\r\n  var testResults = [];\r\n  csv.header.forEach(function (hdr) {\r\n    testResults.push({})\r\n  });\r\n  var numCols = csv.header.length;\r\n\r\n  csv.data.forEach(function (row) {\r\n    for (i = 0; i < numCols; i++) {\r\n\r\n      if (!testResults[i][\"notDate\"]) {\r\n        var date = new Date(row[i]);\r\n        if (isNaN(date.getTime())) {\r\n          dex.console.log(\"not date\" + i);\r\n          testResults[i][\"notDate\"] = true;\r\n        }\r\n      }\r\n\r\n      if (!testResults[i][\"notNumber\"]) {\r\n        if (isNaN(row[i])) {\r\n          testResults[i][\"notNumber\"] = true;\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  var types = [];\r\n\r\n  for (i = 0; i < numCols; i++) {\r\n    var results = testResults[i];\r\n    if (!results.notDate && results.notNumber) {\r\n      types.push('date');\r\n    }\r\n    else if (!results.notNumber) {\r\n      types.push('number');\r\n    }\r\n    else {\r\n      types.push('string');\r\n    }\r\n  }\r\n\r\n  return types;\r\n}\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @returns {*}\r\n */\r\nexports.strictTypes = function strictTypes(csv) {\r\n  var types = dex.csv.guessTypes(csv);\r\n\r\n  for (var i = 0; i < types.length; i++) {\r\n    if (types[i] == 'date') {\r\n      csv.data.forEach(function (row, ri) {\r\n        dex.console.log(\"row[\" + ri + \"]=\" + row[ri]);\r\n        csv.data[ri][i] = new Date(csv.data[ri][i]);\r\n      })\r\n    }\r\n    else {\r\n      if (types[i] == 'number') {\r\n        csv.data.forEach(function (row, ri) {\r\n          dex.console.log(\"row[\" + ri + \"]=\" + row[ri]);\r\n          csv.data[ri][i] = new Double(csv.data[ri][i]);\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  return csv;\r\n};\r\n\r\n/**\r\n *\r\n * This routine will return a frames structure based on a csv and\r\n * an index.  It will first identify all unique values within the\r\n * selected column, then sort them into an array of frame indexes.\r\n * From there, it will return an array of csv where the elements\r\n * contain the specified frame index at the cooresponding location.\r\n * This routine supports things such as time/value filtering for\r\n * things like a time or slicing dimension for various charts.\r\n * IE: No need to write a motion bubble chart, simply combine a\r\n * vcr-player with a regular bubble chart connected to play/rewind\r\n * events and motion will follow.\r\n *\r\n * @param csv\r\n * @param columnIndex\r\n * @returns {{frameIndices: Array.<T>, frames: Array}}\r\n */\r\nexports.getFramesByIndex = function(csv, columnIndex) {\r\n  var types = dex.csv.guessTypes(csv);\r\n  //dex.console.log(\"TYPES\", types);\r\n  var frameIndices;\r\n\r\n  if (types[columnIndex] == \"number\")\r\n  {\r\n    frameIndices = _.uniq(csv.data.map(function (row) {\r\n      return row[columnIndex]\r\n    })).sort(function(a, b){return a-b});\r\n  }\r\n  else if (types[columnIndex] == \"date\")\r\n  {\r\n    frameIndices = _.uniq(csv.data.map(function (row) {\r\n      return row[columnIndex]\r\n    })).sort(function(a, b){\r\n      a = new Date(a);\r\n      b = new Date(b);\r\n      return a>b ? 1 : a<b ? -1 : 0;\r\n    });\r\n  }\r\n  else {\r\n    frameIndices = _.uniq(csv.data.map(function (row) {\r\n      return row[columnIndex]\r\n    })).sort();\r\n  }\r\n  //dex.console.log(\"FRAME-INDICES\", frameIndices)\r\n  var header = dex.array.copy(csv.header);\r\n  var frameIndexName = header.splice(columnIndex, 1);\r\n  var frames = [];\r\n\r\n  for (var fi=0; fi<frameIndices.length; fi++)\r\n  {\r\n    var frame = { header : header };\r\n    var frameData = [];\r\n\r\n    for (var ri=0; ri<csv.data.length; ri++)\r\n    {\r\n      if (csv.data[ri][columnIndex] == frameIndices[fi])\r\n      {\r\n        var frameRow = dex.array.copy(csv.data[ri]);\r\n        frameRow.splice(columnIndex, 1);\r\n        frameData.push(frameRow);\r\n      }\r\n    }\r\n    frame[\"data\"] = frameData;\r\n    frames.push(frame);\r\n  }\r\n\r\n  return {\r\n    'frameIndices' : frameIndices,\r\n    'frames' : frames\r\n  }\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @returns {Array}\r\n */\r\nexports.getNumericIndices = function (csv) {\r\n  var possibleNumeric =\r\n  {};\r\n  var i, j;\r\n  var numericIndices = [];\r\n\r\n  for (i = 0; i < csv.header.length; i++) {\r\n    possibleNumeric[csv.header[i]] = true;\r\n  }\r\n\r\n  // Iterate thru the data, skip the header.\r\n  for (i = 1; i < csv.data.length; i++) {\r\n    for (j = 0; j < csv.data[i].length && j < csv.header.length; j++) {\r\n      if (possibleNumeric[csv.header[j]] && !dex.object.isNumeric(csv.data[i][j])) {\r\n        console.log(\"csv.header[\" + j + \"]=\" + csv.header[j] + \" is not numeric due to csv.data[\" + i + \"][\"\r\n          + j + \"]=\" + csv.data[i][j]);\r\n        possibleNumeric[csv.header[j]] = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (i = 0; i < csv.header.length; i++) {\r\n    if (possibleNumeric[csv.header[i]]) {\r\n      numericIndices.push(i);\r\n    }\r\n  }\r\n\r\n  return numericIndices;\r\n};\r\n\r\nexports.getCategoricalIndices = function (csv) {\r\n  var possibleNumeric =\r\n  {};\r\n  var i, j;\r\n  var categoricalIndices = [];\r\n\r\n  for (i = 0; i < csv.header.length; i++) {\r\n    possibleNumeric[csv.header[i]] = true;\r\n  }\r\n\r\n  // Iterate thru the data, skip the header.\r\n  for (i = 1; i < csv.data.length; i++) {\r\n    for (j = 0; j < csv.data[i].length && j < csv.header.length; j++) {\r\n      if (possibleNumeric[csv.header[j]] && !dex.object.isNumeric(csv.data[i][j])) {\r\n        console.log(\"csv.header[\" + j + \"]=\" + csv.header[j] + \" is not numeric due to csv.data[\" + i + \"][\"\r\n          + j + \"]=\" + csv.data[i][j]);\r\n        possibleNumeric[csv.header[j]] = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (i = 0; i < csv.header.length; i++) {\r\n    if (!possibleNumeric[csv.header[i]]) {\r\n      categoricalIndices.push(i);\r\n    }\r\n  }\r\n\r\n  return categoricalIndices;\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @param columnNum\r\n * @returns {boolean}\r\n */\r\nexports.isColumnNumeric = function (csv, columnNum) {\r\n  var i;\r\n\r\n  for (i = 0; i < csv.data.length; i++) {\r\n    if (!dex.object.isNumeric(csv.data[i][columnNum])) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @param columns\r\n * @returns {*}\r\n */\r\nexports.group = function (csv, columns) {\r\n  var ri, ci;\r\n  var groups = {};\r\n  var returnGroups = [];\r\n  var values;\r\n  var key;\r\n  var otherColumns;\r\n  var otherHeaders;\r\n  var groupName;\r\n\r\n  if (arguments < 2) {\r\n    return csv;\r\n  }\r\n\r\n  function compare(a, b) {\r\n    var si, h;\r\n\r\n    for (si = 0; si < columns.length; si++) {\r\n      h = csv.header[columns[si]]\r\n      if (a[h] < b[h]) {\r\n        return -1;\r\n      }\r\n      else if (a[h] > b[h]) {\r\n        return 1\r\n      }\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  //otherColumns = dex.array.difference(dex.range(0, csv.header.length), columns);\r\n  //otherHeaders = dex.array.slice(csv.header, otherColumns);\r\n\r\n  for (ri = 0; ri < csv.data.length; ri += 1) {\r\n    values = dex.array.slice(csv.data[ri], columns);\r\n    key = values.join(':::');\r\n\r\n    if (groups[key]) {\r\n      group = groups[key];\r\n    }\r\n    else {\r\n      //group = { 'csv' : dex.csv.csv(otherHeaders, []) };\r\n      group =\r\n      {\r\n        'key': key,\r\n        'values': [],\r\n        'csv': dex.csv.csv(csv.header, [])\r\n      };\r\n      for (ci = 0; ci < values.length; ci++) {\r\n        group.values.push({'name': csv.header[columns[ci]], 'value': values[ci]});\r\n      }\r\n      groups[key] = group;\r\n    }\r\n    //group.csv.data.push(dex.array.slice(csv.data[ri], otherColumns));\r\n    group.csv.data.push(csv.data[ri]);\r\n    //groups[key] = group;\r\n  }\r\n\r\n  for (groupName in groups) {\r\n    if (groups.hasOwnProperty(groupName)) {\r\n      returnGroups.push(groups[groupName]);\r\n    }\r\n  }\r\n\r\n  return returnGroups.sort(compare);\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @param func\r\n */\r\nexports.visitCells = function (csv, func) {\r\n  var ci, ri;\r\n\r\n  for (ri = 0; ri < csv.data.length; ri++) {\r\n    for (ci = 0; ci < csv.header.length; ci++) {\r\n      func(ci, ri, csv.data[ri][ci]);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @returns {number}\r\n */\r\nexports.longestWord = function (csv) {\r\n  var longest = 0;\r\n  for (var row = 0; row < csv.data.length; row++) {\r\n    for (var col = 0; col < csv.data[row].length; col++) {\r\n      if (longest < csv.data[row][col].length) {\r\n        longest = csv.data[row][col].length;\r\n      }\r\n    }\r\n  }\r\n  return longest;\r\n};\r\n\r\n/**\r\n *\r\n * @param csv\r\n * @returns {{}|*}\r\n */\r\nexports.numericSubset = function (csv) {\r\n  return dex.csv.columnSlice(csv, dex.csv.getNumericIndices(csv));\r\n};\r\n\r\nexports.categoricalSubset = function (csv) {\r\n  return dex.csv.columnSlice(csv, dex.csv.getCategoricalIndices(csv));\r\n};\r\n\r\n/*\r\n var data =\r\n\r\n */\r\nexports.toJsonHierarchy = function (csv, ci) {\r\n  // If 1 argument, then setup and call with 2.\r\n  if (arguments.length == 1) {\r\n    var result = {'name': 'root', children: dex.csv.toJsonHierarchy(csv, 0)};\r\n    dex.console.log(\"RESULT\", result);\r\n    return result;\r\n  }\r\n  else if (arguments.length == 2) {\r\n    var valueMap = {};\r\n\r\n    for (var ri = 0; ri < csv.data.length; ri++) {\r\n      if (valueMap.hasOwnProperty(csv.data[ri][ci])) {\r\n        valueMap[csv.data[ri][ci]]++;\r\n      }\r\n      else {\r\n        valueMap[csv.data[ri][ci]] = 1;\r\n      }\r\n    }\r\n\r\n    if (ci >= csv.header.length - 1) {\r\n      return _.keys(valueMap).map(function (key) {\r\n        return {'name': key, 'size': valueMap[key]};\r\n      });\r\n    }\r\n    else {\r\n      return _.keys(valueMap).map(function (key) {\r\n        return {'name': key, 'size': valueMap[key]};\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexports.getGraph = function (csv) {\r\n\r\n  var nodes = [];\r\n  var links = [];\r\n  var nodeNum = 0;\r\n  var indexMap = [];\r\n\r\n  // Record uniques across the data, treating each column as it's own namespace.\r\n  csv.header.map(function (col, ci) {\r\n    indexMap.push({});\r\n    csv.data.map(function (row, ri) {\r\n      if (_.isUndefined(indexMap[ci][row[ci]]))\r\n      {\r\n        indexMap[ci][row[ci]]= nodeNum;\r\n        nodes.push({'name' : row[ci]});\r\n        nodeNum++;\r\n      }\r\n    });\r\n  });\r\n\r\n  for (var ci=1; ci<csv.header.length; ci++)\r\n  {\r\n    csv.data.map(function (row, ri) {\r\n      links.push({ 'source' : indexMap[ci-1][row[ci-1]], 'target' : indexMap[ci][row[ci]], 'value' : 1});\r\n    });\r\n  }\r\n\r\n  //dex.console.log(\"NODES\", nodes, links, indexMap);\r\n  return { 'nodes' : nodes, 'links' : links };\r\n};\r\n\r\nexports.toNestedJson = function (csv) {\r\n  dex.console.log(\"CMAP\", dex.csv.getConnectionMap(csv));\r\n  var result = {'name': csv.header[0], 'children': dex.csv.toNestedJsonChildren(dex.csv.getConnectionMap(csv))};\r\n  dex.console.log(\"RESULT\", result);\r\n  return result;\r\n};\r\n\r\nexports.toNestedJsonChildren = function (cmap) {\r\n  //dex.console.log(\"CMAP\", cmap);\r\n  var children = [];\r\n\r\n  _.keys(cmap).map(function (key) {\r\n    var childMap = cmap[key];\r\n    if (_.keys(childMap).length <= 0) {\r\n      children.push({'name': key, 'size': 1000});\r\n    }\r\n    else {\r\n      if (_.keys(childMap).length == 1) {\r\n        //var grandChildMap = childMap[_.keys(childMap)[0]];\r\n\r\n        //dex.console.log(\"GCMAP\", grandChildMap);\r\n        //if (_.keys(grandChildMap).length <= 0) {\r\n        //  children.push({'name': key, 'size': 100});\r\n        //}\r\n        //else {\r\n        children.push({'name': key, 'children': dex.csv.toNestedJsonChildren(cmap[key])});\r\n        //}\r\n      }\r\n      else {\r\n        children.push({'name': key, 'children': dex.csv.toNestedJsonChildren(cmap[key])});\r\n      }\r\n    }\r\n  })\r\n  return children;\r\n};\r\n\r\nexports.getConnectionMap = function (csv) {\r\n  var rootMap = {};\r\n  var curMap = {}\r\n\r\n  for (var row = 0; row < csv.data.length; row++) {\r\n    curMap = rootMap;\r\n\r\n    for (var col = 0; col < csv.header.length; col++) {\r\n      if (!_.has(curMap, csv.data[row][col])) {\r\n        curMap[csv.data[row][col]] = {};\r\n      }\r\n      curMap = curMap[csv.data[row][col]];\r\n    }\r\n  }\r\n\r\n  return rootMap;\r\n};","/**\r\n *\r\n * This module provides support for creating various datasets.\r\n *\r\n * @module datagen\r\n *\r\n */\r\n\r\n/**\r\n * Creates a matrix of random integers within the specified range.\r\n *\r\n * @param spec The matrix specification.  Ex: \\{rows:10, columns: 4, min: 0, max:100\\}\r\n *\r\n * @returns {Array} An array containing spec.rows number of rows.  Each row consisting of\r\n * an array containing spec.columns elements.  Each element is a randomly generated integer\r\n * within the range [spec.min, spec.max]\r\n *\r\n */\r\nexports.randomMatrix = function (spec) {\r\n  var ri, ci;\r\n\r\n  //{rows:10, columns: 4, min, 0, max:100})\r\n  var matrix = [];\r\n  var range = spec.max - spec.min;\r\n  for (ri = 0; ri < spec.rows; ri++) {\r\n    var row = [];\r\n\r\n    for (ci = 0; ci < spec.columns; ci++) {\r\n      row.push(Math.random() * range + spec.min);\r\n    }\r\n    matrix.push(row);\r\n  }\r\n  return matrix;\r\n};\r\n\r\nexports.randomIndexedMatrix = function (spec) {\r\n  var ri, ci;\r\n\r\n  //{rows:10, columns: 4, min, 0, max:100})\r\n  var matrix = [];\r\n  var range = spec.max - spec.min;\r\n  for (ri = 0; ri < spec.rows; ri++) {\r\n    var row = [];\r\n\r\n    row.push(ri+1);\r\n    for (ci = 0; ci < spec.columns - 1; ci++) {\r\n      row.push(Math.random() * range + spec.min);\r\n    }\r\n    matrix.push(row);\r\n  }\r\n  return matrix;\r\n};\r\n\r\nexports.randomIntegerMatrix = function (spec) {\r\n  var ri, ci;\r\n\r\n  //{rows:10, columns: 4, min, 0, max:100})\r\n  var matrix = [];\r\n  var range = spec.max - spec.min;\r\n  for (ri = 0; ri < spec.rows; ri++) {\r\n    var row = [];\r\n\r\n    for (ci = 0; ci < spec.columns; ci++) {\r\n      row.push(Math.round(Math.random() * range + spec.min));\r\n    }\r\n    matrix.push(row);\r\n  }\r\n  return matrix;\r\n};\r\n\r\n/**\r\n * Creates a matrix of random integers within the specified range.\r\n *\r\n * @param spec The matrix specification.  Ex: \\{rows:10, columns:4 \\}\r\n *\r\n * @returns {Array} An array containing spec.rows number of rows.  Each row consisting of\r\n * an array containing spec.columns elements.  Each element is a randomly generated integer\r\n * within the range [spec.min, spec.max]\r\n *\r\n */\r\nexports.identityCsv = function (spec) {\r\n  var ri, ci;\r\n  var csv = {};\r\n  csv.header = dex.datagen.identityHeader(spec);\r\n  csv.data = dex.datagen.identityMatrix(spec);\r\n  return csv;\r\n};\r\n\r\n/**\r\n * This method will return an identity function meeting the supplied\r\n * specification.\r\n *\r\n * @param {object} spec - The identityMatrix specification.\r\n * @param {number} spec.rows - The number of rows to generate.\r\n * @param {number} spec.columns - The number of columns to generate.\r\n * @example {@lang javascript}\r\n * // Returns: [['R1C1', 'R1C2' ], ['R2C1', 'R2C2'], ['R3C1', 'R3C2']]\r\n * identityMatrix({rows: 3, columns: 2});\r\n * @returns {matrix}\r\n *\r\n */\r\nexports.identityMatrix = function (spec) {\r\n  var ri, ci;\r\n\r\n  // { rows:10, columns:4 })\r\n  var matrix = [];\r\n  for (ri = 0; ri < spec.rows; ri++) {\r\n    var row = [];\r\n\r\n    for (ci = 0; ci < spec.columns; ci++) {\r\n      row.push(\"R\" + (ri + 1) + \"C\" + (ci + 1));\r\n    }\r\n    matrix.push(row);\r\n  }\r\n  return matrix;\r\n};\r\n\r\n/**\r\n * Returns an identity header array.\r\n *\r\n * @param spec - The specification for the header array.\r\n * @param spec.columns - The number of columns to generate.\r\n * @example\r\n * // Returns: [ 'C1', 'C2', 'C3' ]\r\n * identityHeader({ columns: 3 });\r\n * @returns {Array} Returns an array of the specified columns.\r\n *\r\n */\r\nexports.identityHeader = function (spec) {\r\n  return dex.range(1, spec.columns).map(function (i) {\r\n    return \"C\" + i;\r\n  });\r\n};\r\n","/**\r\n *\r\n * This module provides routines dealing with json data.\r\n *\r\n * @module json\r\n *\r\n */\r\n\r\n/**\r\n * Converts JSON and a header to a CSV file.  It is used for parallel coordinate brush\r\n * events where the selected brush must be published to events as a csv.\r\n *\r\n * For example, given:\r\n *\r\n * json   = [ { A: 1, B: 3, C: 5, D: 7 },\r\n *            { A: 2, B: 4, C: 6, D: 8 } ];\r\n * header = [ 'A', 'B', 'C', 'D' ];\r\n *\r\n * This will return a csv where:\r\n *\r\n * csv = { header: [ 'A', 'B', 'C', 'D' ],\r\n *         data    [[ 1, 4, 5, 7 ], [ 2, 4, 6, 8 ]];\r\n *\r\n * @param json\r\n * @param header\r\n * @returns {*}\r\n */\r\nexports.toCsv = function (json, header) {\r\n  var csv;\r\n  var ri, ci;\r\n  var data = [];\r\n\r\n  // Keys are provided.\r\n  if (arguments.length == 2) {\r\n    if (Array.isArray(json)) {\r\n      for (ri = 0; ri < json.length; ri++) {\r\n        var row = [];\r\n        for (ci = 0; ci < header.length; ci++) {\r\n          row.push(json[ri][header[ci]]);\r\n        }\r\n        data.push(row);\r\n      }\r\n    }\r\n    else {\r\n      var row = [];\r\n      for (ci = 0; ci < header.length; ci++) {\r\n        row.push(json[ri][header[ci]]);\r\n      }\r\n      data.push(row);\r\n    }\r\n    return dex.csv.csv(header, data);\r\n  }\r\n  else {\r\n    return dex.json.toCsv(json, dex.json.keys(json));\r\n  }\r\n};\r\n\r\n/**\r\n * Returns all keys found in a json structure or array of json structures.\r\n *\r\n * @param json  The json structure or array of json structures.\r\n * @returns {Array} A list of keys found within json.\r\n *\r\n */\r\nexports.keys = function (json) {\r\n  var keyMap = {};\r\n  var keys = [];\r\n  var ri, key;\r\n\r\n  if (Array.isArray(json)) {\r\n    for (ri = 0; ri < json.length; ri++) {\r\n      for (key in json[ri]) {\r\n        keyMap[key] = true;\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    for (key in json) {\r\n      keyMap[key] = true;\r\n    }\r\n  }\r\n\r\n  for (key in keyMap) {\r\n    keys.push(key);\r\n  }\r\n\r\n  return keys;\r\n};\r\n","/**\r\n *\r\n * This module provides routines dealing with matrices.\r\n *\r\n * @module matrix\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * Return the specified slice of the matrix.  The original matrix is\r\n * not altered.\r\n *\r\n * @param {matrix} matrix The matrix to be sliced.\r\n * @param {Array.<number>} columns - An array of column indices to include within the slice.\r\n * @param {number} [rows] If supplied, the slice will consist only of the specified\r\n * number of rows.\r\n *\r\n * @returns {matrix}\r\n */\r\nexports.slice = function (matrix, columns, rows) {\r\n  var matrixSlice = new Array(0);\r\n  //dex.console.log(\"PRE-SLICE (matrixSlize):\" + matrixSlice);\r\n  var ri;\r\n\r\n  if (arguments.length === 3) {\r\n    for (ri = 0; ri < rows.length; ri++) {\r\n      matrixSlice.push(dex.array.slice(matrix[rows[ri]]));\r\n    }\r\n  }\r\n  else {\r\n    for (ri = 0; ri < matrix.length; ri++) {\r\n      //dex.console.log(\"MATRIX-SLICE-BEFORE[\" + ri + \"]:\" + matrixSlice);\r\n      matrixSlice.push(dex.array.slice(matrix[ri], columns));\r\n      //dex.console.log(\"MATRIX-SLICE-AFTER[\" + ri + \"]\" + matrixSlice);\r\n    }\r\n  }\r\n  return matrixSlice;\r\n};\r\n\r\n/**\r\n *\r\n * Returns a matrix consisting of unique values relative to each\r\n * column.\r\n *\r\n * @param {matrix} matrix The matrix to evaluate.\r\n *\r\n * @returns {Array.<Array.<Object>>} The unique values relative to each column. In the form\r\n * of [[ column 1 unique values], [column 2 unique values], ...]]\r\n *\r\n */\r\nexports.uniques = function (matrix) {\r\n  var ci;\r\n  var uniques = [];\r\n  var tmatrix = dex.matrix.transpose(matrix);\r\n  var ncol = tmatrix.length;\r\n\r\n  for (ci = 0; ci < ncol; ci += 1) {\r\n    uniques.push(_.uniq(tmatrix[ci]));\r\n  }\r\n  return uniques;\r\n};\r\n\r\n/**\r\n *\r\n * Returns a transposed matrix where the rows of the new matrix are transposed\r\n * with it's columns.\r\n *\r\n * @param {matrix} matrix - The matrix to transpose.\r\n *\r\n * @returns {matrix} The transposed matrix, leaving the original matrix untouched.\r\n *\r\n * @example {@lang javascript}\r\n * // Returns [['R1C1', 'R2C1', 'R3C1'], ['R1C2', 'R2C2', 'R3C2' ]]\r\n * transpose([['R1C1', 'R1C2'], ['R2C1', 'R2C2], ['R3C1', 'R3C2']]);\r\n *\r\n */\r\nexports.transpose = function (matrix) {\r\n  var ci;\r\n  var ncols;\r\n  var transposedMatrix = [];\r\n  //dex.console.log(\"Transposing:\", matrix);\r\n\r\n  if (!matrix || matrix.length <= 0 || !matrix[0] || matrix[0].length <= 0) {\r\n    return [];\r\n  }\r\n\r\n  ncols = matrix[0].length;\r\n\r\n  for (ci = 0; ci < ncols; ci++) {\r\n    transposedMatrix.push(matrix.map(function (row) {\r\n      return row[ci];\r\n    }));\r\n  }\r\n\r\n  return transposedMatrix;\r\n};\r\n\r\n/**\r\n *\r\n * Return a slice of this matrix based upon the supplied columns.\r\n * The original matrix will be left untouched.\r\n *\r\n * @param {matrix} matrix - The matrix to slice.\r\n * @param {Array.<number>} columns - An array of column indexes to be included in the slice.\r\n *\r\n * @returns {*}\r\n *\r\n */\r\n/*\r\n exports.columnSlice = function (matrix, columns) {\r\n // TODO: Determine, is this destructive?\r\n var slice = [];\r\n var ri;\r\n var transposeMatrix;\r\n\r\n if (arguments.length != 2) {\r\n return matrix;\r\n }\r\n\r\n transposeMatrix = dex.matrix.transpose(matrix);\r\n //dex.console.log(\"transposing\", matrix, \"transpose\", transposedMatrix);\r\n\r\n // Specific columns targetted:\r\n if (Array.isArray(columns)) {\r\n for (ri = 0; ri < columns.length; ri += 1) {\r\n slice.push(transposeMatrix[columns[ri]]);\r\n }\r\n }\r\n // Single column.\r\n else {\r\n slice.push(transposeMatrix[columns]);\r\n }\r\n\r\n // Back to row/column format.\r\n return dex.matrix.transpose(slice);\r\n };\r\n */\r\n\r\n/**\r\n *\r\n * Return a flattened version of the matrix.\r\n *\r\n * @param {matrix} matrix - The matrix to flatten.\r\n *\r\n * @returns {Array.<Object>} A flattened version of the matrix.\r\n *\r\n * @example {@lang javascript}\r\n * // Define a simple matrix.\r\n * var matrix = [['r1c1', 'r1c2'], ['r2c1', 'r2c2']]\r\n *\r\n * // Returns: ['r1c1', 'r1c2', 'r2c1', 'r2c2']\r\n * flatten(matrix);\r\n *\r\n */\r\nexports.flatten = function (matrix) {\r\n  return _.flatten(matrix);\r\n};\r\n\r\n/**\r\n *\r\n * Returns an array of the minimum and maximum value in the form of: [min,max]\r\n * from the specified subset of the matrix.\r\n *\r\n * @param {matrix} matrix - The matrix to scan.\r\n * @param {Array.<number>|number] [indices] - When supplied, will contrain the extent\r\n * search to just those columns specified by this list of indices.\r\n *\r\n * @returns {Array.<number>} An array of two elements: [ min, max ]\r\n *\r\n */\r\nexports.extent = function (matrix, indices) {\r\n  var values = matrix;\r\n  if (arguments.length === 2) {\r\n    values = dex.matrix.flatten(dex.matrix.slice(matrix, indices));\r\n    var max = Math.max.apply(null, values);\r\n    var min = Math.min.apply(null, values);\r\n    return [min, max];\r\n  }\r\n};\r\n\r\n/**\r\n *\r\n * Combine each column in matrix1 with each column in matrix2.\r\n *\r\n * @param {matrix} matrix1 The first matrix to combine.\r\n * @param {matrix} matrix2 The second matrix to combine.\r\n *\r\n * @returns {matrix} The combined matrix.\r\n *\r\n * @example {@lang javascript}\r\n * var matrix1 = [['m1r1c1', 'm1r1c2'], ['m1r2c1', 'm1r2c2']]\r\n * var matrix2 = [['m2r1c1', 'm2r1c2'], ['m2r2c1', 'm2r2c2']]\r\n *\r\n * // Returns: [['m1r1c1', 'm1r1c2', 'm2r1c1', 'm2r1c2'], ['m1r2c1', 'm1r2c2', 'm2r2c1', 'm2r2c2']]\r\n * var result = combine(matrix1, matrix2);\r\n *\r\n */\r\nexports.combine = function (matrix1, matrix2) {\r\n  var result = _.clone(matrix1);\r\n\r\n  var ri;\r\n\r\n  for (ri = 0; ri < matrix2.length; ri++) {\r\n    result[ri] = result[ri].concat(matrix2[ri]);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n *\r\n * Return a copy of the supplied matrix.\r\n *\r\n * @param {matrix} matrix The matrix to copy.\r\n *\r\n * @returns {Array} A copy of the original matrix.\r\n *\r\n */\r\nexports.copy = function (matrix) {\r\n  return matrix.map(function (row) {\r\n    return _.clone(row);\r\n  });\r\n};\r\n\r\n/**\r\n *\r\n * Insert a new column at position 0 within this matrix which will contain\r\n * integer values starting at 1, 2, 3, ...  This is useful if your dataset\r\n * lacks an existing unique index.\r\n *\r\n * @param {matrix} matrix - The matrix to index.\r\n * @returns {matrix} A copy of the original matrix with the index inserted.\r\n *\r\n */\r\nexports.addIndex = function (matrix) {\r\n  var indexMatrix = dex.matrix.copy(matrix);\r\n\r\n  for (var ri = 0; ri < matrix.length; ri++) {\r\n    indexMatrix[ri].unshift(ri + 1);\r\n  }\r\n\r\n  return indexMatrix;\r\n};\r\n\r\n/**\r\n *\r\n * Determine whether the supplied columnNum within the supplied matrix is\r\n * numeric or not.\r\n *\r\n * @param {matrix} matrix - The matrix to evaluate.\r\n * @param {number} columnNum - The column within the matrix to evaluate.\r\n *\r\n * @returns {boolean} True if the column is numeric, false otherwise.\r\n *\r\n */\r\nexports.isColumnNumeric = function (matrix, columnNum) {\r\n  for (var i = 0; i < matrix.length; i++) {\r\n    if (!_.isNumber(matrix[i][columnNum])) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n\r\n/**\r\n *\r\n * Return the maximum value of the specified columnNum within the\r\n * supplied matrix.\r\n *\r\n * @param matrix The matrix to evaluate.\r\n * @param columnNum The column number within the matrix to evaluate.\r\n * @returns {*} The maximum value of the specified column within the\r\n * supplied matrix.\r\n *\r\n */\r\nexports.max = function (matrix, columnNum) {\r\n  var maxValue = matrix[0][columnNum];\r\n  var i;\r\n\r\n  if (dex.matrix.isColumnNumeric(matrix, columnNum)) {\r\n    maxValue = parseFloat(matrix[0][columnNum]);\r\n    for (i = 1; i < matrix.length; i++) {\r\n      if (maxValue < parseFloat(matrix[i][columnNum])) {\r\n        maxValue = parseFloat(matrix[i][columnNum]);\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    for (i = 1; i < matrix.length; i++) {\r\n      if (maxValue < matrix[i][columnNum]) {\r\n        maxValue = matrix[i][columnNum];\r\n      }\r\n    }\r\n  }\r\n\r\n  return maxValue;\r\n};\r\n\r\n/**\r\n *\r\n * Return the minimum value of the specified columnNum within the\r\n * supplied matrix.\r\n *\r\n * @param {matrix} matrix - The matrix to evaluate.\r\n * @param {number} columnNum - The column number within the matrix to evaluate.\r\n * @returns {number} The minimum value of the specified column within the\r\n * supplied matrix.\r\n *\r\n */\r\nexports.min = function (matrix, columnNum) {\r\n  var minValue = matrix[0][columnNum];\r\n  var i;\r\n\r\n  if (dex.matrix.isColumnNumeric(matrix, columnNum)) {\r\n    minValue = parseFloat(matrix[0][columnNum]);\r\n    for (i = 1; i < matrix.length; i++) {\r\n      if (minValue > parseFloat(matrix[i][columnNum])) {\r\n        minValue = parseFloat(matrix[i][columnNum]);\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    for (i = 1; i < matrix.length; i++) {\r\n      if (minValue > matrix[i][columnNum]) {\r\n        minValue = matrix[i][columnNum];\r\n      }\r\n    }\r\n  }\r\n\r\n  return minValue;\r\n};\r\n","/**\r\n *\r\n * This module provides routines dealing with javascript objects.\r\n *\r\n * @module object\r\n *\r\n */\r\n\r\n/**\r\n *\r\n * Return the lccal keys of this object without the inherited ones.\r\n *\r\n * @param obj The object whose local keys we are interested in.\r\n *\r\n * @returns {Array} An array of 0 or more lccal keys.\r\n */\r\nexports.keys = function keys(obj) {\r\n  var keys = [];\r\n\r\n  for (var key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      keys.push(key);\r\n    }\r\n  }\r\n\r\n  return keys;\r\n};\r\n\r\n/**\r\n *\r\n * A pretty good, but imperfect mechanism for performing a deep\r\n * clone of an object.\r\n *\r\n * @param obj The object to clone.\r\n * @returns {*} The cloned object.\r\n *\r\n */\r\nexports.clone = function clone(obj) {\r\n  var i, attr, len;\r\n\r\n  // Handle the 3 simple types, and null or undefined\r\n  if (null == obj || \"object\" != typeof obj)\r\n    return obj;\r\n\r\n  // Handle Date\r\n  if (obj instanceof Date) {\r\n    var copy = new Date();\r\n    copy.setTime(obj.getTime());\r\n    return copy;\r\n  }\r\n\r\n  // Handle Array\r\n  if (obj instanceof Array) {\r\n    var copy = [];\r\n    for (i = 0, len = obj.length; i < len; i++) {\r\n      copy[i] = dex.object.clone(obj[i]);\r\n    }\r\n    return copy;\r\n  }\r\n\r\n  // DOM Nodes are nothing but trouble.\r\n  if (dex.object.isElement(obj) ||\r\n    dex.object.isNode(obj)) {\r\n    return obj;\r\n  }\r\n\r\n  // Handle Object\r\n  if (obj instanceof Object) {\r\n    var copy = {};\r\n    //jQuery.extend(copy, obj);\r\n    for (attr in obj) {\r\n      if (obj.hasOwnProperty(attr)) {\r\n        copy[attr] = dex.object.clone(obj[attr]);\r\n        //copy[attr] = obj[attr];\r\n      }\r\n    }\r\n    return copy;\r\n  }\r\n\r\n  throw new Error(\"Unable to copy obj! Its type isn't supported.\");\r\n};\r\n\r\n/*\r\n  This version causes expand to continue forever.\r\n\r\nexports.isEmpty = function isEmpty(obj) {\r\n  return _.isEmpty(obj);\r\n};\r\n*/\r\n\r\n/**\r\n *\r\n * Kind of misleading.  This really signals when expand should quit\r\n * expanding.  I need to clean this up.\r\n *\r\n * @param obj\r\n * @returns {boolean}\r\n */\r\nexports.isEmpty = function isEmpty(obj) {\r\n  //dex.console.log(\"isEmpty(\" + obj + \") typeof=\" + (typeof obj));\r\n  if (!obj || obj instanceof Array) {\r\n    return true;\r\n  }\r\n  if (\"object\" == typeof obj) {\r\n    for (var key in obj) {\r\n      if (obj.hasOwnProperty(key)) {\r\n        //dex.console.log(\"OBJ: \", obj, \" contains key '\" + key + \"'\");\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n *\r\n * Overlay the top object on top of the bottom.  This method will first clone\r\n * the bottom object.  Then it will drop the values within the top object\r\n * into the clone.\r\n *\r\n * @param {Object} top - The object who's properties will be on top.\r\n * @param {Object} bottom - The object who's properties will be on bottom.\r\n * @return {Object} The overlaid object where the properties in top override\r\n *                  properties in bottom.  The return object is a clone or\r\n *                  copy.\r\n *\r\n */\r\nexports.overlay = function overlay(top, bottom) {\r\n  // Make a clone of the bottom object.\r\n  var overlay = dex.object.clone(bottom);\r\n  var prop;\r\n\r\n  // If we have parameters in the top object, overlay them on top\r\n  // of the bottom object.\r\n  if (top !== 'undefined') {\r\n    // Iterate over the props in top.\r\n    for (prop in top) {\r\n      // Arrays are special cases. [A] on top of [A,B] should give [A], not [A,B]\r\n      if (typeof top[prop] == 'object' && overlay[prop] != null && !(top[prop] instanceof Array)) {\r\n        //console.log(\"PROP: \" + prop + \", top=\" + top + \", overlay=\" + overlay);\r\n        overlay[prop] = dex.object.overlay(top[prop], overlay[prop]);\r\n      }\r\n      // Simply overwrite for simple cases and arrays.\r\n      else {\r\n        overlay[prop] = top[prop];\r\n      }\r\n    }\r\n  }\r\n\r\n  //console.dir(config);\r\n  return overlay;\r\n};\r\n\r\n/**\r\n *\r\n * This method returns whether or not the supplied object is a Node.\r\n *\r\n * @param {Object} obj - The object to test.\r\n *\r\n * @returns {boolean} True if obj is a Node, false otherwise.\r\n *\r\n */\r\nexports.isNode = function isNode(obj) {\r\n  return (\r\n    typeof Node === \"object\" ? obj instanceof Node :\r\n    obj && typeof obj === \"object\" && typeof obj.nodeType === \"number\" && typeof obj.nodeName === \"string\"\r\n  );\r\n};\r\n\r\n/**\r\n *\r\n * This method returns whether or not the supplied object is a\r\n * DOM node.\r\n *\r\n * @param {Object} obj - The object to test.\r\n *\r\n * @returns {boolean} - True if obj is a DOM node, false otherwise.\r\n *\r\n */\r\nexports.isElement = function isElement(obj) {\r\n  return (\r\n    typeof HTMLElement === \"object\" ? obj instanceof HTMLElement : //DOM2\r\n    obj && typeof obj === \"object\" && obj.nodeType === 1 && typeof obj.nodeName === \"string\"\r\n  );\r\n};\r\n\r\n/**\r\n *\r\n * This method returns a boolean representing whether obj is contained\r\n * within container.\r\n *\r\n * @param {Object} container - The container to test.\r\n * @param {Object} obj - The object to test.\r\n *\r\n * @return True if container contains obj.  False otherwise.\r\n */\r\nexports.contains = function contains(container, obj) {\r\n  var i = container.length;\r\n  while (i--) {\r\n    if (container[i] === obj) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n *\r\n * Return whether or not the supplied object is a function.\r\n *\r\n * @param obj The object to check.\r\n * @returns {boolean} True if obj is a function, false otherwise.\r\n *\r\n */\r\nexports.isFunction = function isFunction(obj) {\r\n  //return typeof obj === 'function';\r\n  return _.isFunction(obj);\r\n};\r\n\r\n/**\r\n *\r\n * Visit each local property within.\r\n *\r\n * @param obj\r\n * @param func\r\n */\r\n/*\r\nexports.visit = function (obj, func) {\r\n  var prop;\r\n  func(obj);\r\n  for (prop in obj) {\r\n    if (obj.hasOwnProperty(prop)) {\r\n      if (typeof obj[prop] === 'object') {\r\n        dex.object.visit(obj[prop], func);\r\n      }\r\n    }\r\n  }\r\n};\r\n*/\r\n\r\n/**\r\n *\r\n * @param map\r\n * @param values\r\n * @returns {exports}\r\n */\r\nexports.connect = function connect(map, values) {\r\n  dex.console.log(\"map:\", map, \"values:\", values);\r\n\r\n  if (!values || values.length <= 0) {\r\n    return this;\r\n  }\r\n  if (!map[values[0]]) {\r\n    map[values[0]] = {};\r\n  }\r\n  dex.object.connect(map[values[0]], values.slice(1));\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n *\r\n * @param obj\r\n * @returns {boolean}\r\n */\r\nexports.isNumeric = function (obj) {\r\n  return !isNaN(parseFloat(obj)) && isFinite(obj);\r\n};\r\n\r\n/**\r\n *\r\n * @param hierarchy\r\n * @param name\r\n * @param value\r\n * @param delimiter\r\n * @returns {*}\r\n */\r\nexports.setHierarchical = function (hierarchy, name, value, delimiter) {\r\n  if (hierarchy == null) {\r\n    hierarchy = {};\r\n  }\r\n\r\n  if (typeof hierarchy != 'object') {\r\n    return hierarchy;\r\n  }\r\n\r\n  // Create an array of names by splitting delimiter, then call\r\n  // this function in the 3 argument (Array of paths) context.\r\n  if (arguments.length == 4) {\r\n    return dex.object.setHierarchical(hierarchy,\r\n      name.split(delimiter), value);\r\n  }\r\n\r\n  // Array of paths context.\r\n  else {\r\n    // This is the last variable name, just set the value.\r\n    if (name.length === 1) {\r\n      hierarchy[name[0]] = value;\r\n    }\r\n    // We still have to traverse.\r\n    else {\r\n      // Undefined container object, just create an empty.\r\n      if (!(name[0] in hierarchy)) {\r\n        hierarchy[name[0]] = {};\r\n      }\r\n\r\n      // Recursively traverse down the hierarchy.\r\n      dex.object.setHierarchical(hierarchy[name[0]], name.splice(1), value);\r\n    }\r\n  }\r\n\r\n  return hierarchy;\r\n};\r\n"],"sourceRoot":"/source/"}